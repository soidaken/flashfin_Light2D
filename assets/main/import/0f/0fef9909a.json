[1,["b7A/j6fm1OjYbyMoDqfcr8@f9941","27ylf1ZrNHw4+Zle8RUvEQ@f9941","9eD+IIYvtGcITkond7gtA9@6c48a","c3RuVzyBNFwKMJ8DKkGwDs@f9941","dbT2ADUU1DiqXtHnPl1gc/@6c48a","d1qIq5c0tC7KIH9BVPXbmL@6c48a","b1xZx4fUBPrq1g5x0j6Jvu","87viwd+1NKV6YVbeVUDy9U@168d9","87viwd+1NKV6YVbeVUDy9U@4775e","d8cjoq3Q9JmJCL/wAa9Jbx","baebW/QaNPZpA0wnUA6KU/","daIgtScYpMn43MwEpWauCE@6c48a","c0nDUIQF1LyZtY5+WdKO7y","4fSKR1FBRO/YYsflY8tYt+","e1alj8HqVPypj2nJU7gFIq@6c48a","5cWA3fFVNJ74LqiKWHHEQ8@f9941","87viwd+1NKV6YVbeVUDy9U@1da6a","27ylf1ZrNHw4+Zle8RUvEQ@6c48a","8740oGAvNIF4qZVY2vbcSI@6c48a","5cWA3fFVNJ74LqiKWHHEQ8@6c48a","77N7ckL7FJ14zEMy+45Nye@6c48a","b7A/j6fm1OjYbyMoDqfcr8@6c48a","5aNxVe+pNHYbN1KP6oDXTt","d4COwJmhNPS7QuOe2dKBh4@f9941","77N7ckL7FJ14zEMy+45Nye@f9941","c3RuVzyBNFwKMJ8DKkGwDs@6c48a","d4COwJmhNPS7QuOe2dKBh4@6c48a"],["node","_spriteFrame","_normalMap","_textureSource","_lightSpriteFrame","_parent","_font","_cameraComponent","cb_next","cb_pre","cb_showShadowMap","cb_enabelAmbient","cb_enabelShadow","cb_enabelNormal","cb_enabelLighting","node_cameraUI","node_cameraGame","target","cameraGame","dynamicShadowMapCamera","scene","lightReceiverEffect","shadowMaterial","_tmxFile","_skeletonData","_effectAsset"],[["cc.Node",["_name","_objFlags","_layer","_active","_id","_components","_parent","_lpos","_children","_lrot","_euler","_lscale"],-2,9,1,5,2,5,5,5],["3f8b2gb2MdDmLKfS4MVBLC+",["_innerRadius","_lightType","_intensity","_radius","_falloffRange","_falloffExponent","_outerRadius","_sides","_blendMode","_falloff","_innerAngleStart","_innerAngleEnd","_expandAngle","_outerAngleStart","_outerAngleEnd","_rectWidth","_rectHeight","_lightToLayers","node","_color","_lightSpriteFrame"],-15,1,5,6],"cc.ImageAsset","cc.Texture2D","cc.SpriteFrame",["cc.Label",["_string","_actualFontSize","_enableWrapText","_fontSize","_lineHeight","_horizontalAlign","_overflow","_isSystemFontUsed","_enableOutline","_outlineWidth","node","_color","_outlineColor","_font"],-7,1,5,5,6],["cc.Widget",["_alignFlags","_left","_top","_originalWidth","_bottom","_originalHeight","_horizontalCenter","_verticalCenter","_right","node"],-6,1],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","node","_spriteFrame","_color"],0,1,6,5],["cc.Node",["_name","_objFlags","_layer","_id","_parent","_components","_lpos","_children"],-1,1,12,5,2],["cc.UITransform",["node","_contentSize","_anchorPoint"],3,1,5,5],["4ca56lcxBFIsY7PWrSDTLUX",["_normalMapOnOff","_receiveLayer","node","_normalMap"],1,1,6],["cc.Camera",["_projection","_orthoHeight","_near","_far","_visibility","_name","_priority","_clearFlags","node","_color"],-5,1,5],["cc.PolygonCollider2D",["_sensor","tag","node","_points"],1,1,12],["cc.EffectAsset",["_name","shaders","techniques","combinations"],-1],["RenderQueueDesc",["stages","isTransparent","sortMode"],0],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_objFlags","_layer","_parent","_components","_lpos"],0,1,2,5],["083d8ftuS9OLodO1ov/lYhG",["node"],3,1],["488b7O536ZMd4gzEcLlDECS",["node"],3,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["ed233TFeDtNd507e2H2SlG/",["node","node_cameraGame","node_cameraUI","node_shadowMapRtDebug","cb_enabelLighting","cb_enabelNormal","cb_enabelShadow","cb_enabelAmbient","cb_showShadowMap","cb_pre","cb_next","node_areas"],3,1,1,1,1,1,1,1,1,1,1,1,2],["a99678uP4JBkJT9fuAgb40o",["node"],3,1],["3c690zIFo1HRYEnFXkZkt1n",["node"],3,1],["113b5IefYNO4K6jSlnhMZP+",["node"],3,1],["cc.TiledMap",["_enableCulling","node","_tmxFile"],2,1,6],["sp.Skeleton",["defaultSkin","defaultAnimation","_premultipliedAlpha","_preCacheMode","node","_sockets","_skeletonData"],-1,1,9,6],["sp.Skeleton.SpineSocket",["path","target"],2,1],["74f44JdvmhGFq+DSUPY/lXT",["updateInterval","node"],2,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["root","asset","fileId","instance","nestedPrefabInstanceRoots","targetOverrides"],-3],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyColorHDR","_groundAlbedoHDR"],3,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.SkinInfo",["_enabled"],2],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["cc.TiledLayer",["node"],3,1],["364e94LpMpC+YCILKxxvY4A",["node","cameraGame"],3,1,1],["cc.TiledObjectGroup",["node"],3,1],["a4900fsVDxIMbuzfCJTkO8F",["_enableShadow","node","_ambientColor","dynamicShadowMapCamera","lightReceiverEffect"],2,1,5,1,6],["4eb29g7LQJExqOvuzLQ6koN",["node","shadowMaterial"],3,1,6],["5ea61ow7plG8oApUA50NnVu",["node","node_desc"],3,1,1],["sp.SkeletonData",["_name","_atlasText","textureNames","_skeletonJson","textures"],-1,3],["cc.TTFFont",["_name","_native"],1],["cc.PhysicsMaterial",["_name","_friction","_rollingFriction","_spinningFriction","_restitution"],-2],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.TiledMapAsset",["_name","tmxXmlStr","spriteFrameNames","spriteFrames","spriteFrameSizes"],0,3,12],["ForwardPipeline",["_flows"],3,9],["ShadowFlow",["_name","_stages"],2,9],["ShadowStage",["_name"],2],["ForwardFlow",["_name","_priority","_stages"],1,9],["ForwardStage",["_name","renderQueues"],2,9]],[[9,0,1,1],[0,0,6,5,7,2],[17,0,1],[7,0,3,5,4,2],[7,0,3,4,2],[10,0,2,3,2],[12,0,2,3,2],[21,0,1],[10,2,1],[9,0,1],[9,0,1,2,1],[0,0,1,6,8,5,7,3],[0,0,6,5,7,9,10,2],[0,0,2,6,5,7,3],[6,0,1,8,2,4,3,5,9,8],[7,1,0,3,4,3],[22,0,1],[8,0,2,4,7,5,6,3],[5,0,1,2,10,4],[44,0,1,1],[0,0,2,6,5,3],[6,0,1,2,9,4],[12,1,0,2,3,3],[5,0,5,1,3,4,6,2,10,11,8],[1,1,2,0,3,4,5,18,19,7],[6,0,9,2],[7,0,2,3,4,3],[23,0,1],[1,1,0,18,20,3],[1,2,0,6,9,18,19,5],[1,17,1,0,3,7,4,5,18,19,8],[0,0,1,2,6,5,4],[0,0,6,5,2],[0,0,6,5,7,11,2],[0,0,1,6,5,3],[6,0,1,2,4,6,7,9,7],[10,1,0,2,3,3],[1,1,0,8,18,20,4],[1,1,2,0,3,4,5,8,18,19,8],[5,0,1,3,4,6,2,10,11,7],[39,0,1],[15,0,2],[0,0,1,8,5,3],[0,0,1,2,8,5,4],[0,0,3,2,6,8,5,7,4],[0,0,1,2,4,8,5,7,5],[0,0,6,8,5,2],[0,0,6,8,5,7,11,2],[0,0,6,8,5,7,9,10,2],[0,0,2,6,8,5,7,3],[0,0,1,4,6,8,4],[0,0,1,6,5,7,3],[0,0,6,5,7,9,11,10,2],[0,0,3,6,5,3],[0,0,6,5,9,11,10,2],[8,0,1,3,4,5,6,4],[8,0,1,4,5,6,3],[16,0,1,2,3,4,5,4],[6,0,3,9,3],[6,0,3,5,9,4],[7,3,5,4,1],[18,0,1],[19,0,1,1],[20,0,1,2,3,4,5,6,7,8,9,10,11,1],[24,0,1,2,2],[25,0,1,2,3,4,5,6,5],[26,0,1,2],[1,2,0,6,9,10,11,12,13,14,18,19,10],[1,2,0,6,18,4],[1,1,2,0,3,7,4,5,15,16,8,18,19,11],[1,1,2,0,3,7,4,5,15,16,18,19,10],[1,1,0,3,7,4,5,18,7],[1,17,1,0,3,7,4,5,18,8],[1,2,0,6,18,19,4],[1,0,6,10,11,12,13,14,18,19,8],[5,0,1,3,4,2,10,6],[5,0,5,1,3,4,2,10,7],[5,0,1,3,4,2,7,8,9,10,11,12,13,9],[5,0,1,3,4,2,7,8,9,10,12,13,9],[5,0,5,1,3,4,2,10,11,7],[27,0,1,2],[28,0,1,2,3,2],[29,0,1,2,3,4,5,7],[30,0,1,2,3,4,5,6,7,1],[31,0,1,1],[32,0,1,1],[33,1],[34,1],[35,1],[36,0,2],[37,1],[38,1],[40,0,1,1],[41,0,1],[42,0,1,2,3,4,2],[11,5,0,1,2,3,4,8,9,7],[11,0,6,1,2,3,4,8,9,7],[11,5,0,6,1,2,3,7,4,8,9,9],[43,0,1,1],[45,0,1,2,3,4,5],[13,0,1,2,4],[13,0,3,1,2,5],[46,0,1,3],[47,0,1,2,3,4,6],[48,0,1,2,3,5],[49,0,1,2,3,4,4],[50,0,1],[51,0,1,2],[52,0,2],[53,0,1,2,3],[54,0,1,2],[14,0,2],[14,1,2,0,4]],[[[[41,"Scene_Light2D"],[42,"GameObjects",512,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42],[[9,-1]]],[43,"UI2D",512,33554432,[-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57],[[0,-43,[5,1200,900.0000000000001]],[25,45,-44]]],[11,"area_开始",512,1,[-61,-62,-63,-64,-65,-66,-67,-68,-69,-70],[[0,-58,[5,1280,900]],[15,2,0,-59,8],[5,true,-60,9]],[1,3.531,0,0]],[44,"shadowMapRT-debug",false,33554432,2,[-75,-76,-77,-78],[[0,-71,[5,1624,750]],[26,0,false,-72,51],[2,-73],[61,-74]],[1,435.625,-252.78,0]],[45,"Canvas",512,33554432,"beI88Z2HpFELqR4T5EMHpg",[-100,1,2],[[0,-79,[5,1200,900.0000000000001]],[62,-81,-80],[25,45,-82],[63,-99,-98,-97,4,-96,-95,-94,-93,-92,-91,-90,[3,-83,-84,-85,-86,-87,-88,-89]]],[1,600,450.00000000000006,0]],[11,"area_tilemap 测试",512,1,[-104,-105,-106],[[0,-101,[5,1280,900]],[15,2,0,-102,18],[5,true,-103,19]],[1,1426.063,3048.394,0]],[11,"area_光源掩码测试",512,1,[-110,-111],[[0,-107,[5,1280,900]],[15,2,0,-108,24],[5,true,-109,25]],[1,1462.434,-4.121,0]],[1,"障碍物",1,[[9,-112],[4,0,-113,32],[6,true,-114,[[[0,-50,50],[0,-50,-50],[0,50,-50],[0,50,50]],8,8,8,8]],[7,-115],[2,-116],[16,-117]],[1,1231.909,1970.552,0]],[1,"障碍物-001",1,[[9,-118],[6,true,-119,[[[0,-50,50],[0,-50,-50],[0,50,-50],[0,50,50]],8,8,8,8]],[7,-120],[4,0,-121,33],[27,-122],[16,-123]],[1,1939.751,2041.426,0]],[12,"障碍物-002",1,[[9,-124],[4,0,-125,34],[6,true,-126,[[[0,-50,50],[0,-50,-50],[0,50,-50],[0,50,50]],8,8,8,8]],[7,-127],[27,-128],[16,-129]],[1,1426.159,1226.757,0],[3,0,0,0.5968342167376217,0.8023645790606597],[1,0,0,73.28700000114623]],[1,"障碍物-003",1,[[9,-130],[6,true,-131,[[[0,-50,50],[0,-50,-50],[0,50,-50],[0,50,50]],8,8,8,8]],[7,-132],[4,0,-133,35],[27,-134],[16,-135]],[1,1960.901,2214.516,0]],[11,"area_参数化规则",512,1,[-139],[[0,-136,[5,1280,900]],[15,2,0,-137,10],[5,true,-138,11]],[1,3.531,1011.532,0]],[11,"area_参数化自定义",512,1,[-143],[[0,-140,[5,1280,900]],[15,2,0,-141,12],[5,true,-142,13]],[1,0,2017.306,0]],[11,"area_精灵光源",512,1,[-147],[[0,-144,[5,1280,900]],[15,2,0,-145,14],[5,true,-146,15]],[1,0,3045.463,0]],[46,"TiledMap",6,[-150,-151,-152],[[0,-148,[5,960,960]],[64,false,-149,17]]],[11,"area_点光源阴影",512,1,[-156],[[0,-153,[5,1280,900]],[15,2,0,-154,20],[5,true,-155,21]],[1,1420.857,2034.392,0]],[11,"area_点光源spine",512,1,[-160],[[0,-157,[5,1280,900]],[15,2,0,-158,22],[5,true,-159,23]],[1,1452.447,1012.805,0]],[47,"spine角色",1,[-166],[[10,-161,[5,1223.72998046875,1056.9100341796875],[0,0.6583723499211356,0.0710372684552356]],[65,"default","walk",false,0,-163,[[66,"root/hip/torso1/torso2/neck/head",-162]],27],[2,-164],[5,true,-165,28]],[1,974.745,679.444,0],[1,0.5,0.5,1]],[48,"障碍物-004",18,[-169,-170],[[0,-167,[5,64,64]],[60,-168,[4,4278190335],26]],[1,316.9691162109375,571.1303100585938,0],[3,0,0,0.7627811995308543,0.6466566644226803],[1,180,180,80.58000082584385]],[12,"障碍物",1,[[0,-171,[5,56.039,268.62]],[6,true,-172,[[[0,-28.0195,134.31],[0,-27.1,-134.2],[0,28,-134.1],[0,28.0195,134.31]],8,8,8,8]],[7,-173],[4,0,-174,29],[16,-175]],[1,1154.172,2209.883,0],[3,0,0,0.2974331965507841,0.9547426321211296],[1,0,0,34.60700000114622]],[1,"障碍物",1,[[9,-176],[6,true,-177,[[[0,-50,50],[0,-50,-50],[0,50,-50],[0,50,50]],8,8,8,8]],[7,-178],[4,0,-179,30],[16,-180]],[1,1425.593,2245.325,0]],[17,"item-debug",33554432,2,[-185],[[[0,-181,[5,182.271,40]],[3,0,-182,[4,4278201097],53],[21,9,25.212999999999965,70.89299999999997,-183],-184],4,4,4,1],[1,-483.65150000000006,359.1070000000001,0]],[17,"item-debug-003",33554432,2,[-190],[[[0,-186,[5,182.271,40]],[3,0,-187,[4,4278201097],54],[21,9,25.212499999999977,116.21799999999999,-188],-189],4,4,4,1],[1,-483.65200000000004,313.78200000000004,0]],[17,"item-debug-001",33554432,2,[-195],[[[0,-191,[5,182.271,40]],[3,0,-192,[4,4278201097],55],[21,9,25.212499999999977,162.128,-193],-194],4,4,4,1],[1,-483.65200000000004,267.87200000000007,0]],[17,"item-debug-002",33554432,2,[-200],[[[0,-196,[5,182.271,40]],[3,0,-197,[4,4278201097],60],[21,9,25.212499999999977,207.885,-198],-199],4,4,4,1],[1,-483.65200000000004,222.11500000000007,0]],[17,"item-debug-004",33554432,2,[-205],[[[0,-201,[5,182.271,40]],[3,0,-202,[4,4278201097],61],[21,9,25.212499999999977,254.59100000000007,-203],-204],4,4,4,1],[1,-483.65200000000004,175.409,0]],[17,"pre",33554432,2,[-210],[[[0,-206,[5,280,60]],[3,0,-207,[4,4278201097],62],[35,20,329.3845,655.02,23.204000000000008,-158.60450000000003,-306.796,-208],-209],4,4,4,1],[1,-158.60450000000003,-396.79600000000005,0]],[17,"next",33554432,2,[-215],[[[0,-211,[5,280,60]],[3,0,-212,[4,4278201097],63],[35,20,652.808,655.02,23.204000000000008,156.94100000000003,-306.796,-213],-214],4,4,4,1],[1,156.94100000000003,-396.79600000000005,0]],[1,"obstacle-003",3,[[0,-216,[5,128,128]],[4,0,-217,2],[6,true,-218,[[[0,-64,64],[0,-63.5,-64.2],[0,63,-63.2],[0,64,64]],8,8,8,8]],[7,-219]],[1,-3.531,153.27,0]],[1,"obstacle-002",3,[[0,-220,[5,128,128]],[4,0,-221,3],[6,true,-222,[[[0,-64,64],[0,-63.5,-64.2],[0,63,-63.2],[0,64,64]],8,8,8,8]],[7,-223]],[1,-180,-70.467,0]],[1,"obstacle-001",3,[[0,-224,[5,128,128]],[4,0,-225,4],[6,true,-226,[[[0,-64,64],[0,-63.5,-64.2],[0,63,-63.2],[0,64,64]],8,8,8,8]],[7,-227]],[1,180,-70.467,0]],[1,"obstacle",3,[[0,-228,[5,128,128]],[4,0,-229,5],[6,true,-230,[[[0,-64,64],[0,-63.5,-64.2],[0,63,-63.2],[0,64,64]],8,8,8,8]],[7,-231]],[1,-3.531,-246.73,0]],[1,"障碍物",1,[[9,-232],[6,true,-233,[[[0,-50,50],[0,-50,-50],[0,50,-50],[0,50,50]],8,8,8,8]],[7,-234],[4,0,-235,31]],[1,1449.601,2052.435,0]],[1,"参数化光源-自定义形状4",1,[[10,-236,[5,387.3,427.4],[0,0.34598502452878904,0.48759943846513804]],[24,5,0.9,100,179.83210225096076,84,3,-237,[4,4280756223]],[2,-238],[22,9999,true,-239,[[[0,-50,-50],[0,-50,50],[0,169.3,135],[0,120.9,-124.4]],8,8,8,8]]],[1,-271.651,2197.669,0]],[1,"精灵光源-003",1,[[0,-240,[5,326,326]],[28,1,100,-241,38],[2,-242],[16,-243]],[1,-165.456,3286.453,0]],[1,"精灵光源-004",1,[[0,-244,[5,326,326]],[37,1,100,1,-245,42],[2,-246],[16,-247]],[1,127.65,3272.445,0]],[1,"参数化光源-自定义形状5",1,[[10,-248,[5,404.4,389.20000000000005],[0,0.66864490603363,0.5313463514902363]],[38,5,0.9,100,189.30079899461603,84,3,1,-249,[4,4280756223]],[2,-250],[22,9999,true,-251,[[[0,-186.4,-122.8],[0,-63,98.4],[0,50,50],[0,50,-50]],8,8,8,8]]],[1,244.262,2231.303,0]],[1,"参数化光源-自定义形状6",1,[[10,-252,[5,522.1,356.6],[0,0.5958628615207815,0.6242288278182838]],[24,5,0.9,100,225.22124261490072,84,3,-253,[4,4294936632]],[2,-254],[22,9999,true,-255,[[[0,-227.1,-138.6],[0,-50,50],[0,50,50],[0,127,-118]],8,8,8,8]]],[1,-26.775,1877.671,0]],[1,"参数化光源-自定义形状7",1,[[10,-256,[5,490.7,536.4],[0,0.6458121051558997,0.6002982848620433]],[24,5,0.9,100,238.38990252315645,84,6,-257,[4,4294936632]],[2,-258],[22,9999,true,-259,[[[0,-27.1,22],[0,-232.9,130.4],[0,89.8,56.8],[0,-136.3,-238]],8,8,8,8]]],[1,431.352,1931.953,0]],[1,"参数化光源-自定义形状9",1,[[10,-260,[5,490.7,536.4],[0,0.6458121051558997,0.6002982848620433]],[24,5,0.9,100,238.38990252315648,84,6,-261,[4,4278253055]],[2,-262],[22,9999,true,-263,[[[0,-27.1,22],[0,-232.9,130.4],[0,89.8,56.8],[0,-136.3,-238]],8,8,8,8]]],[1,1714.561,2979.058,0]],[49,"item-debug",33554432,2,[-267],[[0,-264,[5,137.802,40]],[3,0,-265,[4,4278201097],52],[21,9,25.11099999999999,16.277000000000044,-266]],[1,-505.988,413.723,0]],[20,"fps",33554432,41,[[0,-268,[5,117.80199999999999,32]],[23,"FPS:0",0,22,20,20,2,false,-269,[4,4290314228]],[14,45,10,10,4,4,88.90726258324796,40.32,-270],[80,0.25,-271]]],[20,"la",33554432,22,[[0,-272,[5,162.271,32]],[23,"2D光照开启/关闭",0,22,20,20,2,false,-273,[4,4290314228]],[14,45,10,10,4,4,88.90726258324796,40.32,-274]]],[20,"la",33554432,23,[[0,-275,[5,162.271,32]],[23,"环境光开启/关闭",0,22,20,20,2,false,-276,[4,4290314228]],[14,45,10,10,4,4,88.90726258324796,40.32,-277]]],[20,"la",33554432,24,[[0,-278,[5,162.271,32]],[23,"法线开启/关闭",0,22,20,20,2,false,-279,[4,4290314228]],[14,45,10,10,4,4,88.90726258324796,40.32,-280]]],[20,"la",33554432,25,[[0,-281,[5,162.271,32]],[23,"阴影开启/关闭",0,22,20,20,2,false,-282,[4,4290314228]],[14,45,10,10,4,4,88.90726258324796,40.32,-283]]],[20,"la",33554432,26,[[0,-284,[5,162.271,32]],[23,"阴影贴图DEBUG",0,22,20,20,2,false,-285,[4,4290314228]],[14,45,10,10,4,4,88.90726258324796,40.32,-286]]],[31,"la",512,33554432,27,[[0,-287,[5,260,52]],[39,"上一个区域",22,20,20,2,false,-288,[4,4290314228]],[14,45,10,10,4,4,88.90726258324796,40.32,-289]]],[31,"la",512,33554432,28,[[0,-290,[5,260,52]],[39,"下一个区域",22,20,20,2,false,-291,[4,4290314228]],[14,45,10,10,4,4,88.90726258324796,40.32,-292]]],[81,"Scene_Light2D",[-293,5,-294],[82,null,null,"22979c60-1dec-4a82-a4fd-d6df79933db4",null,null,[]],[83,[84,[2,0,0,0,0.520833125],[2,0,0,0,0]],[85,[4,4283190348],[0,512,512]],[86],[87],[88],[89,false],[90],[91]]],[50,"LightSystemKeep",512,"977rKp+fxOK44Vnr5TnkB3",50,[-295,-296,-297]],[55,"CameraGame",512,"9anxiyGIVOcKhz3FYmSL7Y",50,[[-298,[9,-299]],1,4],[1,600,450,0]],[1,"lightB",3,[[0,-300,[5,606,606]],[29,0.9,293.8,303,2,-301,[4,4294901760]],[2,-302]],[1,36.469,-70.467,0]],[1,"lightG",3,[[0,-303,[5,606,606]],[29,0.9,293.8,303,2,-304,[4,4278255360]],[2,-305]],[1,-3.531,-70.467,0]],[1,"lightR",3,[[0,-306,[5,606,606]],[29,0.9,293.8,303,2,-307,[4,4278190335]],[2,-308]],[1,-43.531,-70.467,0]],[51,"la-001",512,12,[[0,-309,[5,746.6403894257128,50.4]],[18,"参数化规则形状光源(可移动光源查看效果)",45.599999999999994,false,-310],[8,-311]],[1,-39.827,303.339,0]],[1,"la-002",13,[[0,-312,[5,706.6404108415571,50.4]],[18,"参数化自定义形状(可移动光源查看效果)",45.599999999999994,false,-313],[8,-314]],[1,-7.607,319.023,0]],[1,"la-002",14,[[0,-315,[5,546.6403894257128,50.4]],[18,"精灵光源(可移动光源查看效果)",45.599999999999994,false,-316],[8,-317]],[1,-7.607,319.023,0]],[32,"floor",15,[[0,-318,[5,960,960]],[40,-319],[8,-320]]],[32,"barrier",15,[[0,-321,[5,960,960]],[40,-322],[5,true,-323,16]]],[1,"la-004",6,[[0,-324,[5,632.6950876336349,50.4]],[18,"Tilemap测试(渲染组件是TiledLayer)",45.599999999999994,false,-325],[8,-326]],[1,-28.371,317.632,0]],[1,"la-005",6,[[0,-327,[5,490.2193839089913,40.32]],[75,"🚩TiledLayer法线为测试功能,可能有渲染不符预期",25.08,22,32,false,-328],[8,-329]],[1,-28.371,260.448,0]],[1,"la-003",16,[[0,-330,[5,626.6403465940242,50.4]],[18,"点光源和阴影(可移动光源查看效果)",45.599999999999994,false,-331],[8,-332]],[1,52.02,321.083,0]],[1,"la-004",17,[[0,-333,[5,802.265260930647,50.4]],[18,"spine动画挂载光源节点(可移动角色查看效果)",45.599999999999994,false,-334],[8,-335]],[1,-28.371,317.632,0]],[1,"la-004",7,[[0,-336,[5,786.6403680098684,50.4]],[18,"光源和接收器掩码测试(可移动光源查看效果)",45.599999999999994,false,-337],[8,-338]],[1,-28.371,317.632,0]],[1,"la-005",7,[[0,-339,[5,308.01557574355814,104.32]],[76,"1:左边光源只影响左边的壁虎\n2:右边光源只影响右边的壁虎\n3:左右光源均影响背景",0,27.36,24,32,false,-340],[8,-341]],[1,-28.371,231.386,0]],[52,"参数化光源-自定义形状5",19,[[10,-342,[5,966.8000000000001,135.5],[0,0.04147703764997934,0.48929889298892987]],[38,5,0.9,100,481.77667777674316,39,4,1,-343,[4,4288937728]],[22,9999,true,-344,[[[0,24.4,2.3],[0,-1.1,15.4],[0,887.7,30.2],[0,715.3,-27.3]],8,8,8,8]]],[1,-16.109,3.606,0],[3,-1.5275256177926046e-17,-1.5275256177926046e-17,-0.8207505708379019,0.5712867060148155],[1,2.000000065642855,2.0000001256563884,1],[1,-180,-180,-69.680001]],[12,"点光源1",1,[[10,-345,[5,530,492.98733056622655],[0,0,0.33221747672625124]],[67,0.9,507.8,530,5,-14,34.4,4,-18,38.4,-346,[4,4294962466]],[2,-347]],[1,1577.464,1879.203,0],[3,0,0,0.216609997919197,0.9762582183016159],[1,0,0,25.019999]],[1,"点光源2",1,[[0,-348,[5,520.6,520.6]],[68,0.9,237.3,260.3,-349],[2,-350]],[1,1328.619,2098.266,0]],[1,"gecko",1,[[0,-351,[5,619,642]],[26,2,false,-352,36],[5,true,-353,37]],[1,124.901,981.664,0]],[1,"参数化光源-规则形状-003",1,[[0,-354,[5,776.7,191.2]],[69,3,1.3,100,139.51528196686544,5,93,4,590.7,5.2,1,-355,[4,4281597934]],[2,-356]],[1,-44.04,927.884,0]],[12,"参数化光源-规则形状-004",1,[[0,-357,[5,369.8305639337309,369.8305639337309]],[30,2147483647,2,100,137.91528196686545,8,47,2,-358,[4,4282505727]],[2,-359]],[1,149.505,1141.876,0],[3,0,0,-0.0017453283658983088,0.9999984769132877],[1,0,0,-0.2]],[1,"精灵光源",1,[[0,-360,[5,150,150]],[28,1,100,-361,39],[2,-362]],[1,-154.061,2820.172,0]],[1,"精灵光源-001",1,[[0,-363,[5,150,150]],[37,1,100,1,-364,40],[2,-365]],[1,147.898,2822.578,0]],[1,"精灵光源-002",1,[[0,-366,[5,150,150]],[28,1,100,-367,41],[2,-368]],[1,-329.262,3055.01,0]],[12,"参数化光源-规则形状-005",1,[[0,-369,[5,369.8305639337309,369.8305639337309]],[30,2147483647,2,100,137.91528196686545,5,47,2,-370,[4,4282505727]],[2,-371]],[1,-234.145,1143.89,0],[3,0,0,-0.0017453283658983088,0.9999984769132877],[1,0,0,-0.2]],[1,"参数化光源-规则形状-006",1,[[0,-372,[5,776.7,191.2]],[70,3,1.3,100,139.51528196686544,5,93,4,590.7,5.2,-373,[4,4281597934]],[2,-374]],[1,-69.329,810.004,0]],[1,"参数化光源-自定义形状8",1,[[0,-375,[5,330.05822908619865,330.05822908619865]],[24,4,0.9,100,134.02911454309933,31,3,-376,[4,4288937728]],[2,-377]],[1,-423.788,1920.799,0]],[12,"参数化光源-规则形状-007",1,[[0,-378,[5,490.8,490.8]],[71,2,100,222.4,5,23,1,-379],[2,-380]],[1,958.544,807.914,0],[3,0,0,-0.0017453283658983088,0.9999984769132877],[1,0,0,-0.2]],[33,"gecko-002",1,[[0,-381,[5,619,642]],[26,2,false,-382,43],[36,2,true,-383,44]],[1,1085.429,-133.983,0],[1,0.5,0.5,1]],[12,"参数化光源-规则形状-008",1,[[0,-384,[5,369.8305639337309,369.8305639337309]],[30,3,2,100,137.91528196686545,5,47,2,-385,[4,4278255391]],[2,-386]],[1,1132.323,-3.237,0],[3,0,0,-0.0017453283658983088,0.9999984769132877],[1,0,0,-0.2]],[12,"参数化光源-规则形状-009",1,[[0,-387,[5,369.8305639337309,369.8305639337309]],[72,5,2,100,137.91528196686545,5,47,2,-388],[2,-389]],[1,1781.426,-35.455,0],[3,0,0,-0.0017453283658983088,0.9999984769132877],[1,0,0,-0.2]],[33,"gecko-003",1,[[0,-390,[5,619,642]],[26,2,false,-391,45],[36,4,true,-392,46]],[1,1779.243,-133.983,0],[1,0.5,0.5,1]],[1,"点光源3",1,[[0,-393,[5,445.6,445.6]],[73,0.9,204.5,222.8,-394,[4,4287611135]],[2,-395]],[1,1222.363,3044.394,0]],[13,"SpriteSplash-004",33554432,4,[[0,-396,[5,30,30]],[3,0,-397,[4,4278255595],47],[25,9,-398]],[1,-797,360,0]],[13,"SpriteSplash-005",33554432,4,[[0,-399,[5,30,30]],[3,0,-400,[4,4278255595],48],[25,36,-401]],[1,797,-345.202,0]],[13,"SpriteSplash-006",33554432,4,[[0,-402,[5,30,30]],[3,0,-403,[4,4278255595],49],[58,12,30,-404]],[1,-797,-360,0]],[13,"SpriteSplash-007",33554432,4,[[0,-405,[5,30,30]],[3,0,-406,[4,4278255595],50],[59,33,30,30,-407]],[1,797,374.798,0]],[56,"Light2DShadowCamera",512,51,[[-408,[92,-410,-409]],1,4],[1,600,450,0]],[57,"Camera-2DUI",512,33554432,5,[-411],[1,0,0,1000]],[1,"la-001",3,[[0,-412,[5,253.15996704101565,134]],[77,"Light2D",100,90,100,false,false,true,4,-413,[4,4282564167],[4,1291845640],6]],[1,0,388.91,0]],[1,"la-002",3,[[0,-414,[5,512,134]],[78,"可编辑光照系统",100,90,100,false,false,true,4,-415,[4,1291845640],7]],[1,0,277.91,0]],[1,"la-001",3,[[0,-416,[5,347.79277600740136,67.8]],[79,"1:功能裁剪中 开启 3D基础功能\n2:偏好设置中 开启 保持场景主循环运行",0,22.799999999999997,20,30,false,-417,[4,4290314228]]],[1,391.577,-308.204,0]],[53,"players",false,15,[[0,-418,[5,960,960]],[93,-419]]],[54,"点光源3",19,[[10,-420,[5,545.8,425.4831134605607],[0,0,0.5823686226758158]],[74,528.1,545.8,-25,17,2,-27,19,-421,[4,4293917302]]],[3,-1.320186799457146e-16,2.59156231125471e-16,-0.3665012267242973,0.9304175679820246],[1,2.0000000656428543,1.9999999999999993,1],[1,-4.36387744889882e-15,3.019907521593541e-14,-43]],[13,"SpriteSplash",33554432,2,[[0,-422,[5,30,30]],[3,0,-423,[4,4278190335],56]],[1,-625.22,344.646,0]],[13,"SpriteSplash-001",33554432,2,[[0,-424,[5,30,30]],[3,0,-425,[4,4278190335],57]],[1,625.344,344.646,0]],[13,"SpriteSplash-002",33554432,2,[[0,-426,[5,30,30]],[3,0,-427,[4,4278190335],58]],[1,624.925,-344.537,0]],[13,"SpriteSplash-003",33554432,2,[[0,-428,[5,30,30]],[3,0,-429,[4,4278190335],59]],[1,-624.775,-344.537,0]],[34,"Lighting2DSystem",512,51,[[94,true,-431,[4,4294967295],-430,0]]],[95,"Camera<CameraComponent>",0,450,0,2000,1,89,[4,4278190080]],[96,0,1,450,0,2000,1374683136,52,[4,4278190080]],[34,"Light2DShadow",512,51,[[98,-432,1]]],[97,"Camera<CameraComponent>",0,2,450.00000000000006,0,2000,0,33554432,90,[4,4294967295]],[1,"nodetest",1,[[9,-433]],[1,-491.762,2733.153,0]],[19,22,43],[19,23,44],[19,24,45],[19,25,46],[19,26,47],[19,27,48],[19,28,49]],0,[0,0,1,0,-1,3,0,-2,12,0,-3,13,0,-4,14,0,-5,6,0,-6,16,0,-7,17,0,-8,7,0,-9,18,0,-10,20,0,-11,21,0,-12,33,0,-13,8,0,-14,34,0,-15,68,0,-16,69,0,-17,9,0,-18,10,0,-19,11,0,-20,70,0,-21,71,0,-22,72,0,-23,35,0,-24,73,0,-25,74,0,-26,75,0,-27,36,0,-28,105,0,-29,37,0,-30,76,0,-31,77,0,-32,38,0,-33,39,0,-34,78,0,-35,79,0,-36,80,0,-37,81,0,-38,82,0,-39,83,0,-40,84,0,-41,40,0,0,2,0,0,2,0,-1,4,0,-2,41,0,-3,22,0,-4,23,0,-5,24,0,-6,96,0,-7,97,0,-8,98,0,-9,99,0,-10,25,0,-11,26,0,-12,27,0,-13,28,0,0,3,0,0,3,0,0,3,0,-1,53,0,-2,54,0,-3,55,0,-4,29,0,-5,30,0,-6,31,0,-7,32,0,-8,91,0,-9,92,0,-10,93,0,0,4,0,0,4,0,0,4,0,0,4,0,-1,85,0,-2,86,0,-3,87,0,-4,88,0,0,5,0,7,104,0,0,5,0,0,5,0,-2,12,0,-3,13,0,-4,14,0,-5,6,0,-6,16,0,-7,17,0,-8,7,0,8,112,0,9,111,0,10,110,0,11,107,0,12,109,0,13,108,0,14,106,0,15,90,0,16,52,0,0,5,0,-1,90,0,0,6,0,0,6,0,0,6,0,-1,15,0,-2,61,0,-3,62,0,0,7,0,0,7,0,0,7,0,-1,65,0,-2,66,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,-1,56,0,0,13,0,0,13,0,0,13,0,-1,57,0,0,14,0,0,14,0,0,14,0,-1,58,0,0,15,0,0,15,0,-1,59,0,-2,60,0,-3,94,0,0,16,0,0,16,0,0,16,0,-1,63,0,0,17,0,0,17,0,0,17,0,-1,64,0,0,18,0,17,19,0,0,18,0,0,18,0,0,18,0,-1,19,0,0,19,0,0,19,0,-1,67,0,-2,95,0,0,20,0,0,20,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,-4,106,0,-1,43,0,0,23,0,0,23,0,0,23,0,-4,107,0,-1,44,0,0,24,0,0,24,0,0,24,0,-4,108,0,-1,45,0,0,25,0,0,25,0,0,25,0,-4,109,0,-1,46,0,0,26,0,0,26,0,0,26,0,-4,110,0,-1,47,0,0,27,0,0,27,0,0,27,0,-4,111,0,-1,48,0,0,28,0,0,28,0,0,28,0,-4,112,0,-1,49,0,0,29,0,0,29,0,0,29,0,0,29,0,0,30,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,-1,42,0,0,42,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,-1,51,0,-3,52,0,-1,100,0,-2,103,0,-3,89,0,-1,102,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,0,59,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,0,63,0,0,63,0,0,63,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,0,70,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,75,0,0,76,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,0,79,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,0,86,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,0,88,0,-1,101,0,18,102,0,0,89,0,-1,104,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,0,97,0,0,98,0,0,98,0,0,99,0,0,99,0,19,101,0,0,100,0,0,103,0,0,105,0,20,50,1,5,5,2,5,5,5,5,50,433],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[21,22,1,1,1,1,6,6,1,2,1,2,1,2,1,2,2,23,1,2,1,2,1,2,1,2,1,24,2,1,1,1,1,1,1,1,1,2,4,4,4,4,4,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[9,10,0,0,0,0,6,6,1,2,1,2,1,2,1,2,11,12,1,2,1,2,1,2,1,2,0,13,14,0,15,0,0,0,0,0,3,4,7,8,8,16,7,3,4,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["27ylf1ZrNHw4+Zle8RUvEQ"]}],[3],0,[],[],[]],[[{"name":"wall7_resized","rect":{"x":0,"y":0,"width":512,"height":512},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-256,-256,0,256,-256,0,-256,256,0,256,256,0],"indexes":[0,1,2,2,1,3],"uv":[0,512,512,512,0,0,512,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-256,"y":-256,"z":0},"maxPos":{"x":256,"y":256,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[17]],[[[99,"raptorhalf","\r\nraptorhalf.png\r\nsize: 1024,512\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\nback_arm\r\n  rotate: false\r\n  xy: 787.5, 329.0\r\n  size: 45.5, 28.5\r\n  orig: 45.5, 28.5\r\n  offset: 0, 0\r\n  index: -1\r\nback_bracer\r\n  rotate: true\r\n  xy: 286.0, 257.0\r\n  size: 38.5, 27.5\r\n  orig: 38.5, 27.5\r\n  offset: 0, 0\r\n  index: -1\r\nback_hand\r\n  rotate: true\r\n  xy: 314.5, 259.5\r\n  size: 36.0, 34.0\r\n  orig: 36.0, 34.0\r\n  offset: 0, 0\r\n  index: -1\r\nback_knee\r\n  rotate: false\r\n  xy: 394.0, 255.5\r\n  size: 48.5, 67.0\r\n  orig: 48.5, 67.0\r\n  offset: 0, 0\r\n  index: -1\r\nback_thigh\r\n  rotate: true\r\n  xy: 261.5, 256.5\r\n  size: 39.0, 23.5\r\n  orig: 39.0, 23.5\r\n  offset: 0, 0\r\n  index: -1\r\neyes_open\r\n  rotate: false\r\n  xy: 967.5, 374.5\r\n  size: 46.5, 44.5\r\n  orig: 46.5, 44.5\r\n  offset: 0, 0\r\n  index: -1\r\nfront_arm\r\n  rotate: false\r\n  xy: 691.0, 327.5\r\n  size: 48.0, 30.0\r\n  orig: 48.0, 30.0\r\n  offset: 0, 0\r\n  index: -1\r\nfront_bracer\r\n  rotate: true\r\n  xy: 231.5, 255.0\r\n  size: 40.5, 29.0\r\n  orig: 40.5, 29.0\r\n  offset: 0, 0\r\n  index: -1\r\nfront_hand\r\n  rotate: true\r\n  xy: 193.0, 254.5\r\n  size: 41.0, 37.5\r\n  orig: 41.0, 37.5\r\n  offset: 0, 0\r\n  index: -1\r\nfront_open_hand\r\n  rotate: true\r\n  xy: 967.5, 330.5\r\n  size: 43.0, 43.5\r\n  orig: 43.0, 43.5\r\n  offset: 0, 0\r\n  index: -1\r\nfront_thigh\r\n  rotate: true\r\n  xy: 625.5, 265.5\r\n  size: 57.0, 29.0\r\n  orig: 57.0, 29.0\r\n  offset: 0, 0\r\n  index: -1\r\ngun\r\n  rotate: true\r\n  xy: 769.0, 166.0\r\n  size: 106.0, 103.0\r\n  orig: 106.5, 103.0\r\n  offset: 0, 0\r\n  index: -1\r\ngun_nohand\r\n  rotate: false\r\n  xy: 873.0, 174.5\r\n  size: 105.0, 101.5\r\n  orig: 105.0, 101.5\r\n  offset: 0, 0\r\n  index: -1\r\nhead\r\n  rotate: false\r\n  xy: 831.0, 362.0\r\n  size: 135.5, 149.0\r\n  orig: 135.5, 149.0\r\n  offset: 0, 0\r\n  index: -1\r\nlower_leg\r\n  rotate: true\r\n  xy: 769.0, 92.0\r\n  size: 73.0, 97.5\r\n  orig: 73.0, 97.5\r\n  offset: 0, 0\r\n  index: -1\r\nmouth_smile\r\n  rotate: false\r\n  xy: 740.0, 328.0\r\n  size: 46.5, 29.5\r\n  orig: 46.5, 29.5\r\n  offset: 0, 0\r\n  index: -1\r\nneck\r\n  rotate: false\r\n  xy: 363.0, 302.0\r\n  size: 17.5, 20.5\r\n  orig: 18.0, 20.5\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_arm_back\r\n  rotate: false\r\n  xy: 714.0, 5.0\r\n  size: 81.5, 86.0\r\n  orig: 81.5, 86.0\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_body\r\n  rotate: false\r\n  xy: 1.0, 11.0\r\n  size: 609.5, 242.0\r\n  orig: 609.5, 285.0\r\n  offset: 0, 39\r\n  index: -1\r\nraptor_front_arm\r\n  rotate: true\r\n  xy: 611.5, 1.0\r\n  size: 81.0, 101.5\r\n  orig: 81.0, 101.5\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_front_leg\r\n  rotate: false\r\n  xy: 1.0, 254.0\r\n  size: 191.0, 257.0\r\n  orig: 191.0, 257.0\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_hindleg_back\r\n  rotate: false\r\n  xy: 193.0, 296.5\r\n  size: 169.0, 214.5\r\n  orig: 169.0, 214.5\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_horn\r\n  rotate: true\r\n  xy: 611.5, 83.0\r\n  size: 181.5, 79.0\r\n  orig: 181.5, 79.5\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_horn_back\r\n  rotate: true\r\n  xy: 691.5, 92.0\r\n  size: 175.5, 76.5\r\n  orig: 175.5, 76.5\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_jaw\r\n  rotate: true\r\n  xy: 691.0, 358.5\r\n  size: 152.5, 139.0\r\n  orig: 152.5, 143.0\r\n  offset: 0, 8\r\n  index: -1\r\nraptor_saddle_noshadow\r\n  rotate: false\r\n  xy: 363.0, 323.5\r\n  size: 163.0, 187.5\r\n  orig: 163.0, 187.5\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_saddle_strap_front\r\n  rotate: true\r\n  xy: 530.0, 265.5\r\n  size: 57.0, 94.5\r\n  orig: 57.0, 94.5\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_saddle_strap_rear\r\n  rotate: true\r\n  xy: 747.5, 273.0\r\n  size: 54.0, 74.0\r\n  orig: 54.0, 74.0\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_saddle_w_shadow\r\n  rotate: false\r\n  xy: 527.0, 323.5\r\n  size: 163.0, 187.5\r\n  orig: 163.0, 187.5\r\n  offset: 0, 0\r\n  index: -1\r\nraptor_tongue\r\n  rotate: false\r\n  xy: 443.5, 258.5\r\n  size: 85.5, 64.0\r\n  orig: 85.5, 64.0\r\n  offset: 0, 0\r\n  index: -1\r\nstirrup_back\r\n  rotate: false\r\n  xy: 349.5, 261.0\r\n  size: 43.5, 34.5\r\n  orig: 43.5, 34.5\r\n  offset: 0, 0\r\n  index: -1\r\nstirrup_front\r\n  rotate: true\r\n  xy: 967.5, 466.5\r\n  size: 44.5, 50.0\r\n  orig: 44.5, 50.0\r\n  offset: 0, 0\r\n  index: -1\r\nstirrup_strap\r\n  rotate: false\r\n  xy: 967.5, 420.0\r\n  size: 48.5, 45.5\r\n  orig: 48.5, 45.5\r\n  offset: 0, 0\r\n  index: -1\r\ntorso\r\n  rotate: true\r\n  xy: 655.5, 268.5\r\n  size: 54.0, 91.0\r\n  orig: 54.0, 91.0\r\n  offset: 0, 0\r\n  index: -1\r\nvisor\r\n  rotate: false\r\n  xy: 834.0, 277.0\r\n  size: 130.5, 84.0\r\n  orig: 130.5, 84.0\r\n  offset: 0, 0\r\n  index: -1\r\n",["raptorhalf.png"],{"skeleton":{"hash":"wqIu/ewuwaXUySUVCcnws5fVJ1I","spine":"3.8.99","x":-805.67,"y":-75.08,"width":1223.73,"height":1056.91,"images":"./images/","audio":""},"bones":[{"name":"root"},{"name":"hip","parent":"root","rotation":3.16,"x":-136.79,"y":415.48,"color":"fbff00ff"},{"name":"torso1","parent":"hip","length":126.26,"rotation":-4.98,"x":30.04,"y":-0.4,"color":"eaff00ff"},{"name":"saddle","parent":"torso1","length":50.92,"rotation":91.8,"x":4.57,"y":71.87,"color":"ff7300ff"},{"name":"spineboy_hip","parent":"saddle","length":0.53,"rotation":90.02,"x":81.88,"y":2.69,"color":"ffffffff"},{"name":"spineboy_torso","parent":"spineboy_hip","length":122.45,"rotation":-75.86,"x":1.05,"y":-2.11,"color":"ffffffff"},{"name":"torso2","parent":"torso1","length":121.2,"rotation":39.85,"x":126.26,"y":-0.38,"color":"eaff00ff"},{"name":"neck","parent":"torso2","length":70.6,"rotation":41.38,"x":121.2,"y":0.35,"color":"eaff00ff"},{"name":"head","parent":"neck","length":105.51,"rotation":9.83,"x":70.6,"y":0.04,"color":"eaff00ff"},{"name":"horn_rear","parent":"head","length":73.78,"rotation":44.32,"x":99.27,"y":-226.8,"color":"e07800ff"},{"name":"rear_arm_target","parent":"horn_rear","rotation":-133.55,"x":232.68,"y":245.85,"color":"e07800ff"},{"name":"back_arm","parent":"spineboy_torso","length":67.21,"rotation":-120.9,"x":96.33,"y":-38.47,"color":"ffffffff"},{"name":"back_bracer","parent":"back_arm","length":43.69,"rotation":17.48,"x":67.22,"y":-0.32,"color":"ffffffff"},{"name":"back_hand","parent":"back_bracer","length":41.98,"rotation":9.21,"x":43.68,"y":0.06,"transform":"noRotationOrReflection","color":"ffffffff"},{"name":"spineboy_rear_arm_goal","parent":"saddle","x":-30.44,"y":-100.08,"color":"ff0001ff"},{"name":"back_thigh","parent":"spineboy_hip","length":71.16,"rotation":160.75,"x":-9.57,"y":2.32,"color":"ffffffff"},{"name":"back_knee","parent":"back_thigh","length":97.17,"rotation":-54.98,"x":71.16,"y":-0.28,"color":"ffffffff"},{"name":"horn_front","parent":"head","length":87.48,"rotation":49.36,"x":82.09,"y":-221.36,"color":"15ff00ff"},{"name":"front_arm_target","parent":"horn_front","rotation":-138.6,"x":294.58,"y":234.18,"color":"15ff00ff"},{"name":"front_arm","parent":"spineboy_torso","length":74.52,"rotation":-118.17,"x":101.38,"y":9.79,"color":"ffffffff"},{"name":"front_bracer","parent":"front_arm","length":39.85,"rotation":20.31,"x":74.52,"y":-0.42,"color":"ffffffff"},{"name":"front_arm1","parent":"torso2","length":109.99,"rotation":224.54,"x":46.37,"y":-84.62,"color":"15ff00ff"},{"name":"front_arm2","parent":"front_arm1","length":86.33,"rotation":105.24,"x":109.99,"y":0.2,"color":"15ff00ff"},{"name":"front_foot_goal","parent":"root","rotation":-0.95,"x":-45.8,"y":-28.67,"color":"ff0000ff"},{"name":"front_leg_goal","parent":"front_foot_goal","x":-106.06,"y":115.58,"color":"ff0000ff"},{"name":"front_leg1","parent":"hip","length":251.75,"rotation":-51.51,"x":27.36,"y":-28.28,"color":"15ff00ff"},{"name":"front_leg2","parent":"front_leg1","length":208.55,"rotation":261.94,"x":251.04,"y":0.16,"color":"15ff00ff"},{"name":"front_leg3","parent":"front_leg2","length":118.18,"rotation":85.46,"x":208.5,"y":-1.64,"color":"15ff00ff"},{"name":"front_foot1","parent":"front_leg3","length":57.79,"rotation":54.46,"x":118.2,"y":-0.79,"scaleX":1.1269,"color":"15ff00ff"},{"name":"front_foot2","parent":"front_foot1","length":56.19,"rotation":-2.16,"x":57.79,"y":-0.02,"scaleX":0.731,"scaleY":0.8231,"transform":"noRotationOrReflection","color":"15ff00ff"},{"name":"front_foot3","parent":"front_foot2","length":129.88,"rotation":-2.7,"x":49.71,"y":20.66,"scaleX":1.1546,"color":"15ff00ff"},{"name":"front_hand","parent":"front_arm2","length":47.56,"rotation":-56.83,"x":86.33,"y":0.06,"color":"15ff00ff"},{"name":"front_hand2","parent":"front_bracer","length":58.19,"rotation":13.9,"x":39.98,"y":-0.9,"transform":"noRotationOrReflection","color":"ffffffff"},{"name":"spineboy_front_arm_goal","parent":"saddle","x":-50.71,"y":-96.93,"color":"ff0004ff"},{"name":"front_thigh","parent":"spineboy_hip","length":77.79,"rotation":163.34,"x":15.52,"y":17.02,"color":"ffffffff"},{"name":"lower_leg","parent":"front_thigh","length":111.5,"rotation":-49.62,"x":77.93,"y":-0.11,"color":"ffffffff"},{"name":"gun","parent":"spineboy_hip","length":181.35,"rotation":107.12,"x":16.86,"y":-7.89,"scaleX":0.8163,"scaleY":0.8163,"color":"ffffffff"},{"name":"neck2","parent":"spineboy_torso","length":32.05,"rotation":-45.23,"x":113.44,"y":-15.22,"color":"ffffffff"},{"name":"head2","parent":"neck2","length":249.65,"rotation":11.66,"x":23.01,"y":3.47,"color":"ffffffff"},{"name":"jaw","parent":"head","length":203.76,"rotation":-140.14,"x":29.37,"y":-40.16,"color":"ffff00ff"},{"name":"rear_arm1","parent":"torso2","length":109.56,"rotation":-124.72,"x":57.05,"y":-95.39,"color":"e07800ff"},{"name":"rear_arm2","parent":"rear_arm1","length":85.8,"rotation":123.56,"x":109.57,"y":-0.01,"color":"e07800ff"},{"name":"rear_foot_goal","parent":"root","x":33.44,"y":30.82,"color":"ff0000ff"},{"name":"rear_leg_goal","parent":"rear_foot_goal","x":-127.51,"y":75.99,"color":"ff0000ff"},{"name":"rear_leg1","parent":"hip","length":226.28,"rotation":-54.76,"x":55.19,"y":-71.25,"color":"e07800ff"},{"name":"rear_leg2","parent":"rear_leg1","length":172.59,"rotation":-92.25,"x":226.32,"y":0.23,"color":"e07800ff"},{"name":"rear_leg3","parent":"rear_leg2","length":103.05,"rotation":82.82,"x":172.32,"y":2.21,"color":"e07800ff"},{"name":"rear_foot1","parent":"rear_leg3","length":84.51,"rotation":75.43,"x":102.38,"y":-0.03,"color":"e07800ff"},{"name":"rear_foot2","parent":"rear_foot1","length":102.31,"rotation":-6.14,"x":84.5,"y":-0.35,"transform":"noRotationOrReflection","color":"e07800ff"},{"name":"rear_hand","parent":"rear_arm2","length":45.81,"rotation":-76.28,"x":85.8,"y":0.11,"color":"e07800ff"},{"name":"saddle_strap_front1","parent":"saddle","length":97.28,"rotation":-148.12,"x":-27.36,"y":-73.39,"color":"ff7300ff"},{"name":"saddle_strap_front2","parent":"saddle_strap_front1","length":102.74,"rotation":-11.14,"x":97.29,"y":0.31,"color":"ff7300ff"},{"name":"saddle_strap_rear1","parent":"saddle","length":38.62,"rotation":151.14,"x":-33.34,"y":87.33,"color":"ff7300ff"},{"name":"saddle_strap_rear2","parent":"saddle_strap_rear1","length":54.36,"x":38.63,"y":-0.02,"color":"ff7300ff"},{"name":"saddle_strap_rear3","parent":"saddle_strap_rear2","length":44.05,"rotation":3.63,"x":54.87,"y":0.2,"color":"ff7300ff"},{"name":"stirrup","parent":"saddle","length":78.17,"rotation":-68.86,"x":-81.94,"y":-103.38,"color":"ff7300ff"},{"name":"stirrup_strap1","parent":"saddle","length":43.7,"rotation":-135,"x":-20.38,"y":-29.37,"color":"ff7300ff"},{"name":"stirrup_strap2","parent":"stirrup_strap1","length":51.62,"rotation":9.39,"x":43.71,"color":"ff7300ff"},{"name":"tail1","parent":"hip","length":162.53,"rotation":162.93,"x":-20.87,"y":6.87,"color":"eaff00ff"},{"name":"tail2","parent":"tail1","length":130.02,"rotation":30.31,"x":162.53,"y":-0.83,"color":"eaff00ff"},{"name":"tail3","parent":"tail2","length":141.06,"rotation":6.89,"x":130.02,"y":0.1,"color":"eaff00ff"},{"name":"tail4","parent":"tail3","length":126.26,"rotation":-18.86,"x":141.06,"y":0.65,"color":"eaff00ff"},{"name":"tail5","parent":"tail4","length":91.06,"rotation":-22.35,"x":126.26,"y":-0.47,"color":"eaff00ff"},{"name":"tongue1","parent":"head","length":55.12,"rotation":-129.04,"x":20.82,"y":-104.75,"color":"ffff00ff"},{"name":"tongue2","parent":"tongue1","length":44.67,"rotation":8.93,"x":55.6,"y":0.93,"color":"fff200ff"},{"name":"tongue3","parent":"tongue2","length":43.65,"rotation":12.86,"x":44.27,"y":-0.21,"color":"fff200ff"}],"slots":[{"name":"back_hand","bone":"back_hand","attachment":"back_hand"},{"name":"back_arm","bone":"back_arm","attachment":"back_arm"},{"name":"back_bracer","bone":"back_bracer","attachment":"back_bracer"},{"name":"back_knee","bone":"back_knee","attachment":"back_knee"},{"name":"raptor_horn_back","bone":"horn_rear","attachment":"raptor_horn_back"},{"name":"raptor_tongue","bone":"root","attachment":"raptor_tongue"},{"name":"raptor_hindleg_back","bone":"rear_leg1","attachment":"raptor_hindleg_back"},{"name":"raptor_arm_back","bone":"root","attachment":"raptor_arm_back"},{"name":"raptor_body","bone":"torso1","attachment":"raptor_body"},{"name":"back_thigh","bone":"back_thigh","attachment":"back_thigh"},{"name":"raptor_saddle_strap_front","bone":"saddle_strap_front1","attachment":"raptor_saddle_strap_front"},{"name":"raptor_saddle_strap_rear","bone":"saddle_strap_rear1","attachment":"raptor_saddle_strap_rear"},{"name":"raptor_saddle_w_shadow","bone":"saddle","attachment":"raptor_saddle_w_shadow"},{"name":"raptor_saddle_noshadow","bone":"saddle"},{"name":"raptor_front_arm","bone":"root","attachment":"raptor_front_arm"},{"name":"raptor_front_leg","bone":"front_leg1","attachment":"raptor_front_leg"},{"name":"raptor_jaw","bone":"jaw","attachment":"raptor_jaw"},{"name":"neck","bone":"neck2","attachment":"neck"},{"name":"spineboy_torso","bone":"spineboy_torso","attachment":"torso"},{"name":"head","bone":"head2","attachment":"head"},{"name":"eyes_open","bone":"head2","attachment":"eyes_open"},{"name":"mouth_smile","bone":"head2","attachment":"mouth_smile"},{"name":"visor","bone":"head2","attachment":"visor"},{"name":"raptor_horn","bone":"horn_front","attachment":"raptor_horn"},{"name":"front_thigh","bone":"front_thigh","attachment":"front_thigh"},{"name":"stirrup_back","bone":"stirrup","attachment":"stirrup_back"},{"name":"lower_leg","bone":"lower_leg","attachment":"lower_leg"},{"name":"stirrup_strap","bone":"stirrup","attachment":"stirrup_strap"},{"name":"stirrup_front","bone":"stirrup","attachment":"stirrup_front"},{"name":"gun","bone":"gun","attachment":"gun_nohand"},{"name":"front_arm","bone":"front_arm","attachment":"front_arm"},{"name":"front_bracer","bone":"front_bracer","attachment":"front_bracer"},{"name":"front_hand","bone":"front_hand2","attachment":"front_hand"}],"ik":[{"name":"front_arm_goal","target":"front_arm_target","bones":["front_arm","front_bracer"]},{"name":"front_foot_goal","order":2,"target":"front_foot_goal","bones":["front_leg3","front_foot1"]},{"name":"front_leg_goal","order":1,"target":"front_leg_goal","bendPositive":false,"bones":["front_leg1","front_leg2"]},{"name":"rear_arm_goal","order":3,"target":"rear_arm_target","bones":["back_arm","back_bracer"]},{"name":"rear_foot_goal","order":5,"target":"rear_foot_goal","bones":["rear_leg3","rear_foot1"]},{"name":"rear_leg_goal","order":4,"target":"rear_leg_goal","bendPositive":false,"bones":["rear_leg1","rear_leg2"]},{"name":"spineboy_front_leg_goal","order":6,"target":"spineboy_front_arm_goal","bendPositive":false,"bones":["front_thigh","lower_leg"]},{"name":"spineboy_rear_leg_goal","order":7,"target":"spineboy_rear_arm_goal","bendPositive":false,"bones":["back_thigh","back_knee"]},{"name":"stirrup","order":8,"target":"stirrup","bones":["stirrup_strap1","stirrup_strap2"]}],"skins":[{"name":"default","attachments":{"back_arm":{"back_arm":{"x":29.72,"y":2.05,"rotation":16.76,"width":91,"height":57}},"back_bracer":{"back_bracer":{"x":13.2,"y":-4.28,"rotation":-0.73,"width":77,"height":55}},"back_hand":{"back_hand":{"x":18.61,"y":4.24,"rotation":-10.99,"width":72,"height":68}},"back_knee":{"back_knee":{"x":45.77,"y":20.47,"rotation":74.23,"width":97,"height":134}},"back_thigh":{"back_thigh":{"x":37.85,"y":-4.37,"rotation":19.25,"width":78,"height":47}},"eyes_open":{"eyes_open":{"x":93.24,"y":-25.45,"rotation":-70.58,"width":93,"height":89}},"front_arm":{"front_arm":{"x":31.38,"y":5.09,"rotation":14.02,"width":96,"height":60}},"front_bracer":{"front_bracer":{"x":11.68,"y":-1.37,"rotation":-6.28,"width":81,"height":58}},"front_hand":{"front_hand":{"x":35.7,"y":7.84,"rotation":-13.97,"width":82,"height":75},"front_open_hand":{"x":42.55,"y":4.62,"rotation":62.19,"width":86,"height":87},"gun":{"x":98.91,"y":22.98,"rotation":56.35,"width":213,"height":206}},"front_thigh":{"front_thigh":{"x":45.7,"y":-3.1,"rotation":16.66,"width":114,"height":58}},"gun":{"gun_nohand":{"type":"mesh","hull":13,"width":210,"height":203,"uvs":[0.71081,0.16149,0.85808,0.41785,1,0.6649,1,1,0.71457,1,0.49803,0.69051,0.30183,0.41009,0,0.58226,0,0.11741,0.27187,0.1243,0.24857,0,0.36658,0,0.61804,0,0.70575,0.53546,0.53669,0.26855],"triangles":[3,13,2,5,13,4,3,4,13,13,6,14,13,5,6,13,1,2,6,8,9,6,7,8,13,14,1,14,0,1,6,9,14,9,11,14,14,12,0,14,11,12,9,10,11],"vertices":[23.49,50.64,83.87,46.33,142.06,42.18,197.91,3.35,163.7,-45.87,86.16,-47.35,15.9,-48.69,8.42,-120.68,-69.06,-66.82,-35.33,-20.74,-58.84,-10.35,-44.69,10,-14.55,53.36,85.21,6.44,20.46,8.21],"edges":[14,12,6,8,6,4,14,16,16,18,18,20,20,22,22,24,8,10,10,12,6,26,10,26,4,2,26,2,22,28,28,26,12,28,2,0,0,24,28,0,18,12]}},"head":{"head":{"x":132.34,"y":1.2,"rotation":-70.58,"width":271,"height":298}},"lower_leg":{"lower_leg":{"x":76.2,"y":22.21,"rotation":66.28,"width":146,"height":195}},"mouth_smile":{"mouth_smile":{"x":27.66,"y":-31.33,"rotation":-70.58,"width":93,"height":59}},"neck":{"neck":{"x":15.1,"y":-1.67,"rotation":-58.92,"width":36,"height":41}},"raptor_arm_back":{"raptor_arm_back":{"type":"mesh","hull":25,"width":163,"height":172,"uvs":[0.38712,0.29362,0.31383,0.46513,0.29243,0.51522,0.32476,0.49311,0.57587,0.32139,0.63255,0.28263,0.71632,0.34508,0.94948,0.51888,0.94948,0.60129,1,0.65257,1,0.90624,0.95463,0.99934,0.88957,0.83205,0.80295,0.99999,0.75236,0.75696,0.6654,0.71301,0.62289,0.63243,0.58195,0.65032,0.22479,0.80641,0.07792,0.73315,0.07825,0.6655,0.07985,0.34307,0,0.29728,0,0,0.32335,0],"triangles":[6,15,16,5,6,16,5,16,4,6,7,15,16,17,4,8,15,7,14,15,8,12,14,8,12,8,9,12,9,10,11,12,10,13,14,12,17,3,4,19,20,2,18,19,2,18,2,3,18,3,17,21,22,23,24,21,23,0,21,24,1,21,0,1,20,21,2,20,1],"vertices":[2,40,36.95,33.31,0.91667,41,68.54,41.05,0.08333,2,40,66.02,20.36,0.76814,41,41.42,24.4,0.23186,2,40,74.51,16.58,0.64468,41,33.5,19.53,0.35532,2,40,70.89,21.97,0.29072,41,40,19.47,0.70928,3,40,42.78,63.9,0.11484,41,90.47,18.95,0.60855,49,-17.2,9.01,0.27661,2,41,101.86,18.84,0.45956,49,-14.39,20.05,0.54044,2,41,106.48,2.09,0.0625,49,2.98,20.56,0.9375,1,49,51.32,21.99,1,1,49,60.41,11.11,1,1,49,72.39,9.62,1,1,49,100.37,-23.87,1,1,49,104.96,-40.9,1,1,49,78.37,-25.62,1,1,49,86.06,-56.84,1,1,49,52.92,-30.05,1,2,41,62.25,-43.93,0.0625,49,37.19,-33.34,0.9375,2,41,64.89,-28.66,0.3125,49,22.99,-27.14,0.6875,2,41,57.7,-27.17,0.30612,49,19.84,-33.78,0.69388,2,40,124.19,3.84,0.19395,41,-5.1,-14.24,0.80605,2,40,110.78,-19.65,0.3125,41,-16.89,10.11,0.6875,2,40,99.15,-19.2,0.51614,41,-9.94,19.44,0.48386,2,40,43.73,-17.04,0.9375,41,23.18,63.93,0.0625,1,40,35.41,-29.78,1,1,40,-15.69,-28.02,1,1,40,-13.88,24.65,1],"edges":[44,46,44,42,38,36,32,30,30,28,28,26,24,22,18,16,16,14,46,48,38,4,6,4,6,36,42,40,40,38,4,2,2,0,40,2,10,32,36,34,34,32,10,8,8,6,34,8,14,12,12,10,12,30,18,20,22,20,26,24,48,0]}},"raptor_body":{"raptor_body":{"type":"mesh","hull":46,"width":1219,"height":570,"uvs":[0.89014,0.11137,1,0.22194,1,0.42848,0.8818,0.38589,0.87401,0.47987,0.84783,0.51728,0.82505,0.54984,0.82403,0.61606,0.82306,0.67973,0.74042,0.8671,0.61597,0.93098,0.49649,0.90968,0.41187,0.7138,0.36955,0.70087,0.32823,0.68824,0.30083,0.69963,0.27516,0.71029,0.25302,0.71948,0.22569,0.73083,0.20832,0.72362,0.19092,0.7164,0.15952,0.70337,0.1301,0.69117,0.09227,0.67547,0.06029,0.63165,0.02855,0.58817,0,0.49874,0.05046,0.53494,0.08267,0.54507,0.11816,0.55623,0.14734,0.54162,0.17913,0.52569,0.20325,0.51361,0.22867,0.50087,0.24872,0.47664,0.27524,0.44459,0.32027,0.39015,0.37518,0.35748,0.43477,0.32202,0.48931,0.35534,0.56021,0.39867,0.61588,0.40674,0.6777,0.4157,0.69095,0.31314,0.69363,0.14742,0.79219,0.08354,0.51541,0.74573,0.62393,0.75425,0.70856,0.7287,0.76133,0.63288,0.7566,0.49455,0.80613,0.27517,0.65886,0.59038,0.53929,0.54937,0.42633,0.52207,0.32461,0.55242,0.22715,0.61801,0.10575,0.61341,0.03969,0.5611,0.77917,0.39462,0.37557,0.53721,0.27743,0.58417,0.16959,0.61583,0.0726,0.58716,0.87546,0.31684,0.85488,0.21417,0.81012,0.17403,0.83214,0.25663,0.83823,0.32215,0.84622,0.41719,0.59955,0.57004,0.49075,0.53764,0.76917,0.43889,0.75913,0.56846,0.87101,0.3701,0.85432,0.43545,0.89558,0.32412,0.90106,0.22877,0.91524,0.20564,0.93086,0.219,0.93447,0.25859,0.91957,0.2776,0.90611,0.26424,0.9415,0.25929,0.93589,0.21546,0.91669,0.19193,0.89297,0.22202,0.90245,0.28513,0.92007,0.281,0.92144,0.2962,0.94856,0.26431,0.19894,0.61694,0.13974,0.6147,0.25159,0.60156,0.88779,0.26675],"triangles":[13,60,12,12,71,46,46,70,47,11,12,46,47,11,46,10,11,47,13,14,55,15,93,14,16,56,15,58,26,27,28,58,27,63,28,29,63,58,28,25,26,58,25,58,63,57,63,29,92,29,30,57,29,92,24,25,63,24,63,57,23,24,57,92,23,57,22,23,92,62,22,92,21,22,62,20,21,91,92,30,62,91,21,62,62,30,31,91,62,31,31,32,93,20,91,56,56,19,20,17,19,56,18,19,17,93,91,31,55,34,35,33,34,55,61,33,55,61,32,33,93,32,61,56,91,93,56,93,15,16,17,56,36,37,54,60,35,36,54,60,36,60,55,35,61,55,14,93,61,14,60,13,55,12,60,54,39,54,37,39,37,38,71,54,39,40,71,39,53,71,40,53,40,41,12,54,71,46,71,53,66,45,0,44,45,66,1,84,85,65,66,0,0,85,65,85,86,65,85,0,1,78,85,84,79,78,84,78,86,85,77,86,78,77,78,79,67,66,65,83,80,79,84,83,79,77,79,80,84,90,83,82,77,80,1,90,84,94,65,86,94,86,77,94,77,82,67,65,94,51,44,66,51,66,67,81,82,80,83,88,81,87,94,82,87,82,81,87,81,88,88,90,89,87,88,89,80,83,81,90,88,83,43,44,51,64,67,94,64,94,87,68,67,64,51,67,68,76,64,87,76,87,89,74,68,64,74,64,76,3,74,76,59,43,51,59,51,68,69,59,68,74,69,68,69,74,3,90,1,2,89,90,2,76,89,2,3,76,2,75,69,3,4,75,3,75,72,69,5,75,4,5,72,75,72,59,69,59,42,43,72,42,59,50,42,72,50,72,5,6,50,5,73,50,6,52,70,42,50,52,42,73,52,50,7,73,6,49,73,7,52,73,49,8,49,7,48,52,49,48,49,8,47,52,48,70,53,41,70,41,42,46,53,70,47,70,52,9,48,8,47,48,9,10,47,9],"vertices":[1,8,147.49,-145.49,1,1,8,89.41,-281.62,1,1,8,-28.24,-285.93,1,1,8,-14.58,-194.68,1,4,6,238.39,-84.13,0.20851,7,32.1,-140.86,0.19337,8,-61.97,-132.26,0.42116,39,129.58,6.39,0.17697,5,2,332.71,63.71,0.06905,6,199.58,-83.04,0.29425,7,3.7,-114.38,0.2194,8,-85.44,-101.33,0.3086,39,127.35,-26.64,0.1087,5,2,307.08,43.5,0.11018,6,166.95,-82.14,0.37282,7,-20.19,-92.14,0.24573,8,-105.18,-75.34,0.21862,39,123.09,-64.79,0.05265,4,2,307.75,5.7,0.18627,6,143.26,-111.59,0.58009,7,-57.44,-98.58,0.12364,8,-142.98,-75.33,0.11,2,2,308.7,-30.56,0.25,6,120.76,-140.04,0.75,2,2,213.95,-142.7,0.75,6,-23.84,-165.46,0.25,3,2,64.45,-187.35,0.3114,58,-158.46,158.33,0.1038,1,84.16,-190.98,0.5848,1,1,-61.48,-178.85,1,4,58,118.47,114.75,0.07383,59,17.18,122.49,0.17504,60,-100.71,132.55,0.06818,1,-166.91,-67.95,0.68294,4,58,170.41,123.13,0.06537,59,66.71,104.78,0.20999,60,-53.09,110.21,0.12016,1,-217.69,-61.34,0.60448,6,58,221.12,131.32,0.02179,59,115.08,87.48,0.23058,60,-6.58,88.4,0.16259,61,-168.93,31.01,0.02826,62,-282.83,-90.19,0.02901,1,-267.66,-55.14,0.52776,5,59,146.51,86.09,0.23636,60,26.67,83.39,0.19338,61,-134.99,41.34,0.06626,62,-257.53,-60.65,0.06964,1,-298.87,-62,0.43436,5,59,178.73,86.41,0.22522,60,56.69,81.29,0.20998,61,-107.13,46.32,0.11272,62,-232.45,-51.27,0.12149,1,-328.69,-69.24,0.3306,5,59,203.27,86.52,0.21604,60,83.06,77.02,0.22458,61,-79.57,53.54,0.13939,62,-210.9,-28.3,0.1562,1,-354.02,-75.42,0.26379,5,59,238.06,85.42,0.20114,60,115.65,74.67,0.2315,61,-49.54,60.59,0.16456,62,-185.49,-14.99,0.19124,1,-385.34,-83.15,0.21156,5,59,255.33,78.86,0.18224,60,133.84,63.18,0.23195,61,-27.04,56.85,0.18907,62,-163.58,-5.27,0.22658,1,-406.45,-79.9,0.17015,5,59,275.48,71.62,0.1617,60,152.98,53.59,0.22885,61,-5.83,53.95,0.21292,62,-142.86,0.12,0.2616,1,-427.73,-77.47,0.13493,5,59,313.82,53.62,0.14198,60,188.05,35.82,0.22294,61,31.85,49.3,0.23479,62,-106.47,7.49,0.29327,1,-465.97,-72.59,0.10702,5,59,345.74,45.55,0.12502,60,219.61,19.29,0.21791,61,68.31,43.02,0.25623,62,-70.13,18.2,0.32249,1,-502.09,-68.2,0.07836,4,59,390.82,21.3,0.11758,60,261.63,-3.66,0.22608,61,114.56,37.84,0.29087,62,-26.15,30.34,0.36547,4,59,423.88,-11.11,0.10537,60,291.46,-39.07,0.21954,61,154.83,15,0.30099,62,19.91,25.68,0.3741,4,59,456.69,-43.28,0.09949,60,321.07,-74.2,0.21749,61,194.8,-7.67,0.30788,62,65.63,21.05,0.37513,4,59,480.34,-100.29,0.10045,60,339.2,-133.2,0.22027,61,232.3,-56.69,0.31103,62,119.71,-8.7,0.36825,4,59,424.35,-67.52,0.10379,60,286.57,-95.27,0.23087,61,169.77,-39.4,0.30828,62,55.52,-18.08,0.35705,4,59,387.09,-53.85,0.11506,60,250.78,-78.12,0.24541,61,130.24,-35.75,0.30092,62,17.87,-30.68,0.33861,4,59,346.04,-38.78,0.13471,60,211.35,-59.22,0.26272,61,86.71,-31.73,0.2888,62,-23.59,-44.55,0.31377,5,58,449.18,125.98,0.02419,59,311.45,-35.26,0.16385,60,175.89,-56.83,0.2727,61,51.54,-43.14,0.26318,62,-52.89,-67.87,0.27608,5,58,418.39,93.72,0.05913,59,269.72,-40.64,0.19681,60,135.2,-53.83,0.27689,61,13.43,-53.12,0.23219,62,-82.03,-93.66,0.23498,5,58,390.83,86.58,0.10639,59,241.19,-39.81,0.23541,60,105.59,-52.93,0.27333,61,-16.25,-62.17,0.1946,62,-108.35,-111.24,0.19029,5,58,364.81,62.48,0.14348,59,207.72,-42.15,0.28099,60,73.33,-49.44,0.26868,61,-46.11,-70.49,0.15765,62,-129.51,-133.57,0.1492,5,58,345.49,47.53,0.185,59,182.35,-50.62,0.33114,60,45.87,-56.63,0.25881,61,-71.57,-84.96,0.11741,62,-150.85,-153.36,0.10764,5,58,319.96,15.16,0.23755,59,145.6,-61.96,0.39397,60,9.62,-63.26,0.2462,61,-101.06,-105.59,0.06444,62,-165.65,-187.83,0.05784,3,58,276.58,-30.61,0.29942,59,85.52,-81.12,0.46775,60,-52.01,-76.63,0.23283,3,58,214.51,-70.36,0.32855,59,11.97,-85.98,0.48601,60,-125.69,-74.49,0.18544,2,58,147.14,-113.5,0.59566,59,-67.85,-91.26,0.40434,2,2,-113.14,135.85,0.24192,58,91.72,-112.6,0.75808,2,2,-42.13,116.78,0.14515,58,18.2,-111.18,0.85485,1,2,44.21,107.1,1,2,2,140.1,96.36,0.22579,6,72.59,65.41,0.77421,4,2,137.69,169.36,0.05645,6,117.51,123.01,0.24355,7,78.31,94.48,0.2125,8,23.71,91.75,0.4875,2,7,171.16,111.99,0.25,8,118.18,93.15,0.75,1,8,158.96,-25.59,1,1,1,-40.63,-86.01,1,3,2,67.35,-86.67,0.33216,58,-137.03,59.92,0.08304,1,92.55,-90.62,0.5848,2,2,170.13,-66.3,0.75,6,-8.54,-78.72,0.25,2,2,231.75,-8.13,0.4,6,76.04,-73.53,0.6,4,2,222.05,70.42,0.17552,6,118.9,-7,0.55823,7,-6.58,-4,0.1774,8,-76.74,9.19,0.08885,1,8,50.43,-46.57,1,1,6,-9.88,20.66,1,2,2,-53.22,20.53,0.2,58,5.8,-15.1,0.8,3,2,-180.71,32.22,0.08565,58,132.35,4.25,0.56215,59,-23.99,19.01,0.3522,3,58,246.39,57.53,0.30274,59,101.61,10.66,0.46989,60,-27.28,13.2,0.22737,5,58,346.99,126.85,0.1348,59,223.18,22.83,0.28279,60,94.89,13.78,0.24481,61,-47.86,-3.72,0.17322,62,-158.03,-73.17,0.16438,4,59,367.51,-9.97,0.14657,60,235.46,-32.58,0.23074,61,100.06,1.63,0.29607,62,-24.82,-8.64,0.32662,4,59,440.24,-55.61,0.10822,60,303.52,-84.92,0.21898,61,182.07,-23.81,0.31098,62,60.48,1.15,0.36183,3,6,175,22.23,0.2,7,54.83,-19.14,0.6,8,-18.81,-16.21,0.2,3,58,189.26,30.84,0.33253,59,38.69,14.84,0.48077,60,-89.52,23.35,0.1867,5,58,295.09,91.09,0.22891,59,160.46,16.55,0.38755,60,31.86,13.48,0.23061,61,-106.86,-25.9,0.08043,62,-203.09,-117.24,0.0725,5,58,414.44,146.25,0.0736,59,291.61,7.28,0.20198,60,161.54,-8.2,0.23762,61,22.28,-1.19,0.24025,62,-94.87,-42.57,0.24655,4,59,404.01,-32.87,0.12352,60,269.62,-58.85,0.22262,61,141.22,-11.14,0.3061,62,17.99,-3.73,0.34777,1,8,26.4,-166.07,1,1,8,87.21,-106.12,1,1,8,108.19,-49.63,1,2,8,61.73,-82.14,0.50022,39,4.42,52.83,0.49978,2,8,22.85,-109.41,0.50022,39,51.53,46.73,0.49978,4,6,247.12,-50.53,0.06545,7,60.87,-121.41,0.0607,8,-30.31,-118.01,0.49079,39,96.58,17.22,0.38305,1,2,26.73,14.8,1,2,2,-107.97,25.68,0.24192,58,60.18,-6.91,0.75808,4,2,235.53,102.97,0.07611,6,150.11,9.35,0.35534,7,27.65,-12.35,0.41675,8,-44.44,-4.88,0.1518,3,2,227.15,28.49,0.31016,6,95.96,-42.46,0.60549,7,-47.24,-15.44,0.08435,2,8,5.2,-153.11,0.87619,39,90.97,71.21,0.12381,4,6,243.14,-60.6,0.10669,7,51.22,-126.33,0.09894,8,-40.65,-121.22,0.47072,39,105.72,17.34,0.32365,1,8,23.7,-185.21,1,1,8,79.64,-175.95,1,1,8,93.96,-187.57,1,1,8,87.08,-206.55,1,1,8,64.2,-216.74,1,1,8,52.24,-203.69,1,1,8,59.25,-187.04,1,1,8,64.26,-223.8,1,1,8,89.44,-211.42,1,1,8,102.05,-186.95,1,1,8,83.11,-166.15,1,1,8,46.85,-186.42,1,1,8,50.32,-204.36,1,1,8,41.71,-206.6,1,1,8,61.88,-230.98,1,5,58,374.97,143.61,0.10292,59,256.3,17.42,0.23985,60,127.44,2.07,0.24311,61,-13.35,-3.05,0.20855,62,-128.14,-55.46,0.20557,4,59,327.21,4.42,0.1779,60,196.29,-19.33,0.24248,61,58.72,-1.06,0.28055,62,-62.24,-26.22,0.29907,5,58,318.32,113.63,0.17774,59,192.26,20.15,0.33383,60,64.19,12.45,0.24171,61,-76.55,-13.67,0.12849,62,-182.56,-89.32,0.11822,2,8,56.98,-162.99,0.8926,39,57.55,112,0.1074],"edges":[22,20,20,18,18,16,6,4,4,2,90,88,54,52,52,50,24,22,88,86,86,84,8,6,24,26,26,28,72,74,74,76,70,72,46,48,48,50,54,56,56,58,80,82,82,84,76,78,78,80,8,10,10,12,12,14,14,16,0,90,0,2,62,64,64,66,40,42,58,60,60,62,42,44,44,46,66,68,68,70,32,34,34,36,52,116,116,126,126,114,114,184,184,124,124,182,182,112,112,186,186,122,122,110,110,120,120,108,108,142,142,106,106,140,140,104,92,94,94,96,96,98,98,146,146,100,100,144,144,118,118,102,8,150,150,138,138,136,136,134,134,132,156,154,154,164,164,162,162,160,160,158,158,156,180,178,178,174,174,188,188,172,170,168,28,30,30,32,36,38,38,40]}},"raptor_front_arm":{"raptor_front_arm":{"type":"mesh","hull":27,"width":162,"height":203,"uvs":[0.39563,0.1396,0.38771,0.30213,0.31231,0.41784,0.27287,0.47836,0.33389,0.4507,0.5488,0.35329,0.64093,0.31153,0.73024,0.3653,1,0.5277,1,0.86607,0.93243,1,0.86176,0.80967,0.75576,0.99765,0.71748,1,0.70276,0.77443,0.62032,0.73448,0.58793,0.64519,0.53561,0.6582,0.13449,0.75798,0,0.69219,0.01846,0.56358,0.05499,0.30918,0,0.27863,0,0.12423,0,0,0.19596,0,0.40243,0,0.24536,0.19241,0.21679,0.0811],"triangles":[0,28,26,23,25,28,28,25,26,23,24,25,6,7,16,6,16,5,15,16,7,7,14,15,8,14,7,11,14,8,11,8,9,12,14,11,13,14,12,10,11,9,17,4,5,16,17,5,18,19,3,18,3,4,18,4,17,27,28,0,27,22,23,27,23,28,1,27,0,21,22,27,21,27,1,2,21,1,2,20,21,3,20,2,19,20,3],"vertices":[2,21,3.07,31.88,0.51075,6,66.56,-109.48,0.48925,1,21,35.87,35.63,1,2,21,60.94,27.12,0.84641,22,46.49,31.13,0.15359,2,21,74.06,22.67,0.34921,22,36.5,21.54,0.65079,3,21,67.01,31.59,0.10938,22,47.67,23.69,0.78125,31,-40.94,-19.44,0.10938,2,22,86.98,31.25,0.65079,31,-25.75,17.61,0.34921,2,22,103.84,34.49,0.34375,31,-19.24,33.5,0.65625,2,22,114.04,19.51,0.10938,31,-1.12,33.84,0.89063,1,31,53.62,34.88,1,1,31,96.03,-19.16,1,1,31,104.2,-47.32,1,1,31,71.34,-23.98,1,1,31,81.39,-64.61,1,1,31,76.81,-68.82,1,1,31,46.66,-34.26,1,2,22,73.14,-45.76,0.10938,31,31.14,-36.12,0.89063,2,22,73.98,-26.91,0.34375,31,15.82,-25.1,0.65625,2,22,65.11,-26.69,0.65079,31,10.78,-32.41,0.34921,3,21,133.56,9.13,0.10938,22,-2.94,-25.03,0.78125,31,-27.85,-88.47,0.10938,2,21,123.67,-14.43,0.34921,22,-19.29,-5.39,0.65079,2,21,97.41,-15.44,0.84641,22,-8.08,18.38,0.15359,1,21,45.47,-17.43,1,2,21,40.69,-27.18,0.45035,6,-1.69,-93.8,0.54965,2,21,-2.74,-29.64,0.44352,6,19,-72.94,0.55648,1,6,32.12,-48.46,1,1,6,57.57,-67.43,1,1,6,84.38,-87.42,1,2,21,16.44,5.22,0.71821,6,46.31,-101.87,0.28179,2,21,-4.52,5.32,0.48851,6,52.82,-81.95,0.51149],"edges":[38,36,32,30,30,28,28,26,24,26,24,22,22,20,20,18,18,16,44,42,38,6,38,40,40,42,6,4,4,2,40,4,8,6,36,8,32,12,42,2,52,0,0,2,16,14,14,12,30,14,36,34,34,32,12,10,10,8,34,10,48,50,50,52,44,46,46,48,50,56,56,54]}},"raptor_front_leg":{"raptor_front_leg":{"type":"mesh","hull":32,"width":382,"height":514,"uvs":[0.55117,0.17818,0.6279,0.36027,0.66711,0.4533,0.6488,0.51528,0.53554,0.56894,0.32335,0.66947,0.28674,0.72087,0.32539,0.80401,0.36258,0.80144,0.42056,0.79744,0.61015,0.78436,0.84813,0.84029,1,0.93855,0.62439,0.91738,0.72813,1,0.58574,1,0.36708,0.96668,0.26307,0.95082,0.16267,0.93552,0.03859,0.72238,0,0.66947,0.0374,0.62999,0.1647,0.49563,0.23732,0.45681,0.2702,0.43923,0.28064,0.43365,0.223,0.40571,0.12565,0.35851,0,0.2976,0,0.1524,0,0,0.32132,0,0.32222,0.22778,0.44931,0.38031,0.47664,0.44362,0.4615,0.47375,0.35106,0.53247,0.20091,0.65257,0.18528,0.72148,0.25222,0.86314,0.30942,0.88124,0.55694,0.89613,0.55858,0.89208,0.47493,0.8534,0.6059,0.91526,0.39706,0.8913,0.1323,0.09352,0.36997,0.45346,0.37163,0.43828,0.32516,0.39424,0.2376,0.34426,0.34066,0.47415],"triangles":[46,30,31,41,42,44,43,9,10,42,43,10,41,43,42,10,13,42,11,13,10,13,11,12,13,44,42,14,15,13,45,8,9,45,40,8,16,40,45,17,40,16,16,45,15,15,45,44,45,41,44,15,44,13,45,9,43,45,43,41,19,21,38,20,21,19,39,38,6,39,6,7,40,39,7,40,7,8,18,19,38,18,38,39,17,39,40,18,39,17,47,25,48,24,25,47,35,48,34,47,48,35,51,24,47,23,24,51,3,34,2,35,34,3,36,51,47,36,47,35,4,35,3,36,35,4,37,22,23,21,22,37,36,37,23,36,23,51,5,37,36,5,36,4,6,37,5,38,21,37,38,37,6,29,30,46,32,31,0,46,31,32,28,29,46,46,27,28,32,50,46,50,27,46,33,32,0,33,0,1,49,50,32,33,49,32,26,27,50,26,50,49,25,26,49,48,49,33,25,49,48,34,33,1,48,33,34,34,1,2],"vertices":[2,25,128.03,88.47,0.85041,1,158.83,-71.92,0.14959,2,25,219.55,53.15,0.77988,26,-48.05,-38.59,0.22012,2,25,266.31,35.11,0.53545,26,-36.73,10.22,0.46455,2,25,286.89,9.8,0.35167,26,-14.56,34.15,0.64833,2,25,281.55,-41.24,0.09228,26,36.71,36,0.90772,3,25,271.54,-136.86,0.05787,26,132.77,39.48,0.71426,27,35,78.76,0.22788,3,26,158.22,55.17,0.5308,27,52.66,54.64,0.38143,28,7.02,85.54,0.08776,5,26,167.14,99.49,0.21499,27,97.55,49.25,0.35358,28,28.72,45.88,0.14221,29,-21.26,49.99,0.22491,30,-72.3,25.96,0.06432,5,26,154.23,105.56,0.07538,27,102.57,62.61,0.23051,28,42.51,49.56,0.28379,29,-7.07,51.4,0.27005,30,-58.17,28.03,0.14027,4,27,109.72,83.4,0.11607,28,64.09,55.24,0.08124,29,15.13,53.52,0.36962,30,-36.1,31.19,0.43307,1,30,35.81,41.81,1,1,30,128.11,17.93,1,1,30,188.73,-29.42,1,2,29,93.3,-7.6,0.48,30,44.87,-26.18,0.52,2,29,133.18,-49.83,0.776,30,86.69,-66.48,0.224,2,29,78.79,-50.15,0.768,30,32.38,-69.36,0.232,1,29,-4.92,-33.56,1,3,27,155.05,-5.14,0.35918,28,17.88,-32.51,0.30633,29,-44.62,-25.61,0.3345,4,26,254.98,126.28,0.10155,27,131.22,-36.21,0.54212,28,-21.25,-31.18,0.20873,29,-83.02,-17.98,0.1476,3,26,240.34,7.81,0.25587,27,11.94,-30.99,0.61615,28,-86.32,68.91,0.12798,2,26,239.27,-23.1,0.45486,27,-18.96,-32.37,0.54514,3,25,187.65,-209.74,0.09777,26,216.67,-33.36,0.58893,27,-30.98,-10.65,0.3133,2,25,163.86,-128.68,0.19603,26,139.75,-68.26,0.80397,2,25,165.75,-94.49,0.31963,26,105.59,-71.26,0.68037,2,25,166.4,-79.07,0.46225,26,90.23,-72.77,0.53775,2,25,166.49,-74.17,0.53786,26,85.43,-73.29,0.46214,2,25,141.54,-82.47,0.73138,26,97.13,-96.82,0.26862,2,25,99.76,-97.08,0.85324,26,117.34,-136.23,0.14676,2,25,45.01,-114.56,0.83615,1,-51.09,-135.29,0.16385,2,25,-16.21,-74.77,0.62989,1,-42.95,-58.39,0.37011,2,25,-74.73,-19.33,0.31469,1,-52.66,17.56,0.68531,2,25,1.68,76.75,0.25576,1,70.07,18.78,0.74424,1,25,93.55,4.14,1,2,25,185.14,-6.67,0.75462,26,15.99,-64.28,0.24539,2,25,217.11,-18.75,0.50845,26,23.47,-30.93,0.49155,2,25,225.64,-32.92,0.32528,26,36.31,-20.51,0.67472,2,25,223,-84.74,0.20193,26,87.97,-15.86,0.79807,3,25,235.62,-168.07,0.08091,26,168.7,8.29,0.57148,27,6.75,40.47,0.34761,3,26,191.8,35.81,0.32545,27,36.01,19.63,0.57243,28,-31.15,78.74,0.10211,4,26,206.64,111.54,0.10808,27,112.69,10.83,0.52068,28,6.26,11.23,0.23518,29,-49.03,19.43,0.13606,3,27,130.61,26.42,0.35068,28,29.36,5.72,0.28241,29,-27.13,10.26,0.36691,2,29,67.47,3.17,0.384,30,18.56,-16.63,0.616,1,30,19.07,-14.52,1,2,29,36.01,24.95,0.384,30,-13.89,3.64,0.616,2,29,86.23,-6.55,0.488,30,37.76,-25.46,0.512,4,26,164.9,153.55,0.02264,27,151.19,56,0.23908,28,65.44,5.56,0.19254,29,8.45,4.28,0.54574,2,25,-9.28,-17.51,0.59606,1,7.72,-30.86,0.40394,2,25,195.91,-53.82,0.42369,26,61.12,-47.06,0.57631,2,25,190.1,-48.45,0.53231,26,56.62,-53.56,0.46769,2,25,161.27,-48.26,0.79874,26,60.44,-82.13,0.20126,2,25,120.38,-58.54,0.85455,26,76.31,-121.19,0.14545,2,25,197.37,-69.23,0.3355,26,76.18,-43.47,0.6645],"edges":[40,38,38,36,28,30,28,26,26,24,24,22,22,20,14,12,12,10,6,4,60,62,0,62,40,42,42,44,34,36,16,14,52,50,4,2,2,0,10,8,8,6,72,74,74,76,76,78,78,80,80,90,90,88,16,18,18,20,30,32,32,34,56,58,58,60,94,96,96,98,52,54,54,56,100,98,48,50,44,46,46,48,102,94,72,70,70,68,66,68,66,64,64,92,86,84,50,96,94,48,46,102,52,98,54,100,70,6,68,4,66,2,72,8,86,20,86,82,82,88,84,26,88,26]}},"raptor_hindleg_back":{"raptor_hindleg_back":{"type":"mesh","hull":36,"width":338,"height":429,"uvs":[0.45041,0.09352,0.56934,0.23361,0.65294,0.47297,0.66354,0.50822,0.63175,0.54255,0.32384,0.69723,0.30069,0.73876,0.27934,0.77704,0.30417,0.83513,0.31059,0.85014,0.34101,0.85047,0.45165,0.85164,0.59556,0.81882,0.91177,0.92548,1,1,0.56337,0.96427,0.4835,0.98261,0.29879,0.98027,0.22808,0.98389,0.15998,0.98738,0.15424,0.95547,0.13895,0.87048,0.07371,0.78726,0,0.753,0,0.7049,0,0.671,0.11876,0.64653,0.16535,0.5266,0.28496,0.47398,0.29011,0.45774,0.29427,0.4446,0.20635,0.40396,0.06129,0.33691,0,0.25247,0,0,0.30793,0,0.276,0.20262,0.40398,0.31122,0.48439,0.45964,0.48318,0.48384,0.47029,0.51062,0.22698,0.67328,0.17142,0.7242,0.17122,0.78242,0.22996,0.89469,0.24677,0.90829,0.28672,0.9146,0.46583,0.91414],"triangles":[15,13,14,16,47,15,15,12,13,15,47,12,18,46,17,18,45,46,17,47,16,17,46,47,47,10,11,47,46,10,47,11,12,45,18,19,44,45,20,20,45,19,20,21,44,46,9,10,46,45,9,45,44,9,21,43,44,44,8,9,44,7,8,44,43,7,21,22,43,43,22,42,43,42,7,22,23,24,24,42,22,7,42,6,42,41,6,6,41,5,24,26,42,42,26,41,24,25,26,5,40,4,5,41,40,41,28,40,26,27,41,41,27,28,40,39,4,28,29,40,40,29,39,4,39,3,39,2,3,29,30,39,39,38,2,39,30,38,38,1,2,30,37,38,38,37,1,30,31,37,31,36,37,31,32,36,32,33,36,37,0,1,37,36,0,33,34,36,36,35,0,36,34,35],"vertices":[1,44,53.94,69.16,1,1,44,126.23,67.31,1,2,44,226.42,31.14,0.9375,45,-30.88,-1.11,0.0625,2,44,240.84,25.33,0.7,45,-25.65,13.52,0.3,2,44,246.67,8.06,0.3,45,-8.61,20.02,0.7,3,44,240.82,-115.25,0.0625,45,114.81,19.01,0.875,46,9.48,59.16,0.0625,2,45,131.07,29.69,0.7,46,22.12,44.36,0.3,2,45,146.07,39.54,0.3,46,33.76,30.71,0.7,3,45,152.6,65.01,0.12567,46,59.85,27.41,0.75203,47,15.86,48.05,0.1223,3,45,154.29,71.6,0.05444,46,66.6,26.56,0.78402,47,16.73,41.31,0.16154,3,46,71.2,35.76,0.64716,47,26.79,39.17,0.1317,48,-67.33,18.96,0.22114,3,46,87.93,69.21,0.0625,47,63.37,31.39,0.675,48,-30.18,23.3,0.2625,2,47,113.82,35.72,0.10381,48,16.23,43.56,0.89619,1,48,128.14,12.02,1,1,48,161.85,-15.82,1,2,47,90.99,-23.36,0.01381,48,13.52,-19.72,0.98619,2,47,62.98,-25.82,0.7,48,-12.23,-31.02,0.3,3,46,115.12,-1.34,0.08333,47,1.94,-12.66,0.83333,48,-74.27,-38.11,0.08333,2,46,106.11,-23.53,0.3,47,-21.81,-9.53,0.7,2,46,97.44,-44.91,0.7,47,-44.67,-6.51,0.3,2,46,84.26,-40.69,0.9375,47,-43.91,7.3,0.0625,1,46,49.19,-29.47,1,2,45,206.75,5.37,0.13333,46,7.44,-33.78,0.86667,2,45,219.64,-20.52,0.36111,46,-16.64,-49.81,0.63889,2,45,208.41,-37.83,0.72083,46,-35.22,-40.82,0.27917,2,45,200.49,-50.03,0.91667,46,-48.31,-34.49,0.08333,1,45,161.11,-36.98,1,2,44,150.1,-116.77,0.08333,45,119.88,-71.55,0.91667,2,44,154.99,-70.72,0.42846,45,73.68,-68.48,0.57154,2,44,150.31,-65.27,0.35605,45,68.43,-73.37,0.64395,2,44,146.52,-60.87,0.59148,45,64.18,-77.33,0.40852,2,44,115.13,-75.09,0.8446,45,79.61,-108.13,0.1554,1,44,63.33,-98.54,1,1,44,21.78,-94.56,1,1,44,-66.69,-32.05,1,1,44,-6.63,52.97,1,1,44,58.15,-6.01,1,1,44,121.17,2.44,1,1,44,188.87,-12.1,1,2,44,197.12,-18.43,0.7,45,19.79,-28.44,0.3,2,44,203.99,-28.62,0.3,45,29.7,-21.18,0.7,1,45,136.67,-7.43,1,2,45,164.32,0.67,0.7,46,-2.53,7.74,0.3,2,45,177.98,21.58,0.25,46,19.92,-3.2,0.75,1,46,71.94,-6.3,1,2,46,79.66,-3.72,0.7,47,-9.29,21.05,0.3,2,46,87.98,7.26,0.3125,47,3.43,15.76,0.6875,3,46,114.17,61.85,0.04,47,62.84,4.16,0.7,48,-21.96,-2.67,0.26],"edges":[66,68,66,64,56,54,54,52,52,50,46,44,44,42,34,32,32,30,30,28,28,26,26,24,24,22,10,8,8,6,6,4,4,2,2,0,68,70,0,70,46,48,48,50,14,12,12,10,60,58,58,56,42,40,40,38,18,16,16,14,22,20,20,18,38,36,36,34,60,62,62,64,68,72,72,74,74,76,76,78,78,80,80,82,82,84,84,86,16,88,86,88,18,90,90,38,88,90,20,92,92,36,90,92,92,94,94,22,94,32,30,24,88,40,86,14,84,12,82,10,82,52,48,84,44,86,78,6,4,76,80,8,80,56,58,78,76,60]}},"raptor_horn":{"raptor_horn":{"x":156.21,"y":74.11,"rotation":-137.26,"width":363,"height":159}},"raptor_horn_back":{"raptor_horn_back":{"x":121.43,"y":83.01,"rotation":-132.22,"width":351,"height":153}},"raptor_jaw":{"raptor_jaw":{"type":"mesh","hull":14,"width":305,"height":286,"uvs":[0.40985,0.2217,0.42215,0.3988,0.67895,0.53819,0.75891,0.62838,0.99999,0.4726,1,0.53491,0.87731,0.77925,0.63281,0.94488,0.39908,0.96947,0.19457,0.89404,0.2161,0.6497,0,0.46112,0,0,0.26069,0,0.19457,0.29385],"triangles":[14,13,0,14,0,1,5,3,4,10,14,1,11,14,10,6,3,5,2,10,1,7,2,3,7,3,6,2,8,10,8,9,10,2,7,8,14,12,13,11,12,14],"vertices":[1,39,28.6,68.86,1,1,39,69.65,38.95,1,1,39,150.72,72.89,1,1,39,186.17,74.8,1,1,39,199.76,159.69,1,1,39,213.35,148.17,1,1,39,242.43,74.43,1,1,39,230.32,-13.08,1,1,39,189.56,-72,1,1,39,132.76,-105.61,1,1,39,83.72,-55.39,1,2,8,-18.32,12.1,0.67733,39,-0.05,-70.76,0.32267,1,8,113.45,16.95,1,1,8,116.37,-62.49,1,1,39,1.86,5.44,1],"edges":[22,24,22,20,20,18,18,16,16,14,14,12,12,10,10,8,8,6,6,4,4,2,2,0,24,26,0,26,24,28,22,28,28,0]}},"raptor_saddle_noshadow":{"raptor_saddle_noshadow":{"x":80.84,"y":10.63,"rotation":-88.65,"width":326,"height":375}},"raptor_saddle_strap_front":{"raptor_saddle_strap_front":{"x":128.83,"y":-4.72,"rotation":61.29,"width":114,"height":189}},"raptor_saddle_strap_rear":{"raptor_saddle_strap_rear":{"type":"mesh","hull":19,"width":108,"height":148,"uvs":[0.855,0.06803,1,0.13237,1,0.20266,0.95982,0.26524,0.88584,0.38045,0.80684,0.46413,0.74038,0.53454,0.81676,0.58951,0.51962,1,0.45161,1,0.01739,0.84071,0,0.8089,0.24646,0.3664,0.37921,0.39151,0.42457,0.32099,0.49229,0.21571,0.57673,0.10986,0.66437,0,0.70169,0,0.56029,0.46322,0.68822,0.29773,0.76846,0.18722,0.6153,0.39206],"triangles":[7,8,6,9,10,13,13,11,12,6,8,19,8,9,19,9,13,19,13,10,11,19,22,6,13,14,19,19,14,22,6,22,5,22,20,5,5,20,4,14,15,22,22,15,20,20,21,4,15,16,20,4,21,3,20,16,21,2,3,0,3,21,0,0,1,2,21,16,18,16,17,18,21,18,0],"vertices":[1,52,3.91,-3.27,1,1,52,4.25,15.05,1,1,52,13.24,20.29,1,2,52,23.43,21.2,0.7,53,-15.2,21.22,0.3,3,52,41.12,22.88,0.3,53,2.49,22.9,0.6375,54,-33.83,24.97,0.0625,3,52,52.07,21.72,0.0625,53,13.44,21.75,0.6375,54,-22.98,23.12,0.3,2,53,18.39,20.76,0.25,54,-18.1,21.82,0.75,1,54,-18.76,33.09,1,1,54,49.93,31.57,1,1,54,53.21,25,1,1,54,53.11,-27.49,1,1,54,49.74,-31.27,1,1,54,-20.74,-36.77,1,1,54,-23.83,-22.28,1,3,52,53.48,-24.62,0.0625,53,14.85,-24.6,0.575,54,-24.52,-23.22,0.3625,3,52,41.45,-26.12,0.3,53,2.81,-26.1,0.6375,54,-36.62,-23.95,0.0625,2,52,24.38,-26.12,0.7,53,-14.25,-26.1,0.3,1,52,5.57,-26.13,1,1,52,3.54,-22.65,1,1,54,-23.09,-0.04,1,2,52,41.67,-1.73,0.3125,53,3.03,-1.7,0.6875,2,52,23.85,-2.47,0.7,53,-14.78,-2.45,0.3,2,53,13.95,-1.5,0.64583,54,-23.94,-0.11,0.35417],"edges":[26,24,24,22,22,20,20,18,16,18,16,14,14,12,4,2,34,36,12,38,38,26,8,40,40,30,2,0,0,36,30,32,32,34,32,42,4,6,6,8,42,6,26,28,28,30,28,44,8,10,10,12,44,10]}},"raptor_saddle_w_shadow":{"raptor_saddle_w_shadow":{"x":80.84,"y":10.63,"rotation":-88.65,"width":326,"height":375}},"raptor_tongue":{"raptor_tongue":{"type":"mesh","hull":14,"width":171,"height":128,"uvs":[0.35242,0.21561,0.4794,0.44246,0.62072,0.61177,0.80563,0.75374,1,0.90297,1,1,0.8971,1,0.72055,0.92255,0.50668,0.82872,0.30402,0.70725,0.10537,0.57889,0,0.50622,0,0,0.26225,0],"triangles":[8,7,6,6,4,5,4,6,3,6,7,3,7,8,3,8,2,3,9,10,1,8,9,2,9,1,2,1,10,0,10,11,0,0,12,13,0,11,12],"vertices":[2,63,3.64,27.05,0.6875,64,-47.27,33.88,0.3125,3,63,39.1,19.46,0.3125,64,-13.42,20.87,0.625,65,-51.54,33.38,0.0625,3,63,71.56,19.03,0.0625,64,18.59,15.4,0.625,65,-21.56,20.92,0.3125,2,64,55.03,16.86,0.3125,65,14.29,14.24,0.6875,2,64,93.34,18.4,0.08333,65,51.98,7.21,0.91667,1,65,56.09,-4.51,1,2,64,85.07,-1.49,0.08333,65,39.49,-10.33,0.91667,2,64,54.23,-9.18,0.3125,65,7.71,-10.97,0.6875,3,63,75.14,-14.72,0.0625,64,16.87,-18.5,0.625,65,-30.77,-11.74,0.3125,3,63,38.8,-25.81,0.3125,64,-20.75,-23.8,0.625,65,-68.63,-8.54,0.0625,2,63,2.4,-35.78,0.6875,64,-58.25,-27.99,0.3125,2,63,-17.29,-40.63,0.91667,64,-78.46,-29.72,0.08333,1,63,-59.92,8.19,1,2,63,-26.14,37.69,0.91667,64,-75.02,49.02,0.08333],"edges":[22,24,10,12,10,8,24,26,16,4,18,16,2,4,18,2,22,20,0,26,20,0,0,2,12,14,14,16,4,6,6,8,14,6,20,18]}},"spineboy_torso":{"torso":{"x":55.88,"y":4.87,"rotation":-104.14,"width":108,"height":182}},"stirrup_back":{"stirrup_back":{"x":53.2,"y":31.34,"rotation":-21.13,"width":87,"height":69}},"stirrup_front":{"stirrup_front":{"x":36.14,"y":20.39,"rotation":-21.13,"width":89,"height":100}},"stirrup_strap":{"stirrup_strap":{"type":"mesh","hull":16,"width":97,"height":91,"uvs":[0.36823,0.27894,0.45738,0.38897,0.54452,0.49652,0.67872,0.59135,0.81977,0.69102,1,0.77344,1,1,0.77957,1,0.6373,0.8163,0.53364,0.72349,0.40534,0.60861,0.30886,0.52535,0.2105,0.44048,0,0.26245,0,0,0.30637,0,0.20242,0.23001],"triangles":[2,10,1,9,10,2,9,2,3,8,9,3,8,3,4,7,8,4,7,4,5,7,5,6,16,14,15,13,14,16,16,15,0,12,16,0,12,0,1,13,16,12,11,12,1,10,11,1],"vertices":[2,56,24.72,8.04,0.80345,57,-17.42,11.02,0.19655,2,56,37.95,8.04,0.59979,57,-4.37,8.87,0.40021,2,56,50.88,8.05,0.36895,57,8.39,6.77,0.63105,2,56,65.92,12.27,0.17748,57,23.92,8.48,0.82252,2,56,81.73,16.71,0.05943,57,40.24,10.28,0.94057,2,56,98.83,25.04,0.0121,57,58.47,15.72,0.9879,2,56,114.44,11.58,0.00191,57,71.67,-0.11,0.99809,2,56,100.47,-4.61,0.01818,57,55.25,-13.81,0.98182,2,56,78.8,-4.14,0.07488,57,33.95,-9.81,0.92512,2,56,65.83,-6.24,0.2028,57,20.81,-9.77,0.7972,2,56,49.79,-8.84,0.39972,57,4.56,-9.71,0.60028,2,56,37.94,-10.97,0.62658,57,-7.48,-9.89,0.37342,2,56,25.86,-13.15,0.82035,57,-19.76,-10.07,0.17965,2,56,0.25,-18.03,0.95289,57,-45.82,-10.7,0.04711,2,56,-17.84,-2.43,0.9771,57,-61.11,7.64,0.0229,2,56,1.58,20.07,0.94775,57,-38.29,26.68,0.05225,2,56,10.84,-1.24,0.9771,57,-32.63,4.14,0.0229],"edges":[28,30,30,0,12,10,8,10,12,14,14,16,26,28,24,26,26,32,32,30,20,22,22,24,0,2,2,4,4,6,6,8,16,18,18,20]}},"visor":{"visor":{"x":99.13,"y":6.51,"rotation":-70.58,"width":261,"height":168}}}}],"animations":{"Jump":{"bones":{"root":{"rotate":[{}],"translate":[{"curve":"stepped"},{"time":0.3,"curve":0.202,"c2":0.18,"c3":0.816,"c4":0.83},{"time":0.6667,"x":1482.78}],"scale":[{}]},"front_foot_goal":{"rotate":[{"curve":"stepped"},{"time":0.2},{"time":0.3,"angle":-41.64},{"time":0.3667,"angle":-69.67},{"time":0.4333,"angle":-12.81},{"time":0.5333,"angle":5.74},{"time":0.6667}],"translate":[{"curve":"stepped"},{"time":0.3},{"time":0.3667,"x":-60.01,"y":111.1},{"time":0.4333,"x":213.18,"y":291.23},{"time":0.5333,"x":243.74,"y":332.61},{"time":0.6667,"x":95.94}],"scale":[{"curve":"stepped"},{"time":0.6667}]},"hip":{"rotate":[{"angle":-4.48},{"time":0.1,"angle":-23.03},{"time":0.3,"angle":19.24},{"time":0.5333,"angle":20.85},{"time":0.6667,"angle":-10.76},{"time":0.7667,"angle":-18.59},{"time":0.9333,"angle":-3.56},{"time":1.0667,"angle":-4.48}],"translate":[{"x":-100.65,"y":49.77},{"time":0.1,"x":9.38,"y":-109.07,"curve":0.246,"c3":0.609,"c4":0.42},{"time":0.1667,"x":150.37,"y":-76.51,"curve":0.401,"c2":0.34,"c3":0.858,"c4":0.88},{"time":0.3,"x":361.01,"y":36.69},{"time":0.5333,"x":5.37,"y":290.92,"curve":0.809,"c3":0.893,"c4":0.82},{"time":0.6667,"x":-56.27,"y":88.08},{"time":0.7667,"x":179.93,"y":-59.94,"curve":0.25,"c3":0.75},{"time":0.9333,"x":238.12,"y":50.64,"curve":0.25,"c3":0.75},{"time":1.0667,"x":213.2,"y":49.77}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_foot_goal":{"rotate":[{"curve":"stepped"},{"time":0.2},{"time":0.3,"angle":-41.64},{"time":0.3667,"angle":-69.67},{"time":0.4333,"angle":-57.97},{"time":0.7,"angle":-9.2},{"time":0.7333,"angle":-7.79}],"translate":[{"curve":"stepped"},{"time":0.3},{"time":0.3667,"x":-131.67,"y":47.59},{"time":0.4333,"x":-16.11,"y":205.84},{"time":0.5333,"x":61.3,"y":320.2},{"time":0.7333,"x":235.63}],"scale":[{"curve":"stepped"},{"time":0.7,"curve":"stepped"},{"time":0.7333}]},"front_leg1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_leg_goal":{"rotate":[{}],"translate":[{"curve":"stepped"},{"time":0.3},{"time":0.7,"x":-0.4,"y":24.3},{"time":0.7667}],"scale":[{}]},"rear_leg1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_leg_goal":{"rotate":[{}],"translate":[{"curve":"stepped"},{"time":0.3},{"time":0.7,"x":6.75,"y":25.65},{"time":0.7667}],"scale":[{}]},"tail1":{"rotate":[{},{"time":0.1,"angle":-11.02},{"time":0.3,"angle":0.53},{"time":0.4333,"angle":8.64},{"time":0.7,"angle":-9.74},{"time":0.7667,"angle":-4.46,"curve":0.243,"c3":0.649},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"torso1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_leg2":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_leg2":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"saddle":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"tail2":{"rotate":[{},{"time":0.1,"angle":-39.83},{"time":0.3,"angle":-31.83},{"time":0.4333,"angle":-7.28},{"time":0.5333,"angle":1.28},{"time":0.6,"angle":-7.23},{"time":0.7,"angle":-30.66},{"time":0.7667,"angle":-40.54,"curve":0.243,"c3":0.649},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"torso2":{"rotate":[{},{"time":0.1,"angle":0.52},{"time":0.3,"angle":-1.91},{"time":0.5333,"angle":1.04},{"time":0.7,"angle":-3.26},{"time":0.7667,"angle":4.82},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_arm1":{"rotate":[{},{"time":0.1667,"angle":-308.79},{"time":0.3,"angle":-398.7},{"time":0.5333,"angle":-297.81},{"time":0.7,"angle":62.19},{"time":0.7667,"angle":-325.37},{"time":0.8333,"angle":-374.43},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_leg3":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"neck":{"rotate":[{},{"time":0.1,"angle":-8.26},{"time":0.3,"angle":-1.91},{"time":0.5333,"angle":5.44},{"time":0.7,"angle":24.02},{"time":0.7667,"angle":4.83},{"time":0.8667,"angle":-1.79},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":0.1},{"time":0.3,"x":62.91,"y":-44.25},{"time":0.5333,"x":-4.36,"y":17.31},{"time":0.7},{"time":0.7667,"x":23.3,"y":-42.27},{"time":0.8667,"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_arm1":{"rotate":[{},{"time":0.1,"angle":51.21},{"time":0.3333,"angle":-38.7},{"time":0.6,"angle":62.19,"curve":"stepped"},{"time":0.7333,"angle":62.19},{"time":0.8,"angle":34.63},{"time":0.8667,"angle":-14.43},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_leg3":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_front1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_rear1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"spineboy_front_arm_goal":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"spineboy_hip":{"rotate":[{"curve":"stepped"},{"time":0.8667,"curve":"stepped"},{"time":1.0667}],"translate":[{},{"time":0.1,"x":35.97,"y":-11.83},{"time":0.3,"x":31.11,"y":-50.39},{"time":0.5333,"x":12.11,"y":-8.04},{"time":0.7,"x":41.71,"y":-19.46},{"time":0.8667,"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":0.8667,"curve":"stepped"},{"time":1.0667}]},"spineboy_rear_arm_goal":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"stirrup":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"stirrup_strap1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"tail3":{"rotate":[{},{"time":0.1,"angle":-8.97},{"time":0.3,"angle":-18.39},{"time":0.4333,"angle":0.9},{"time":0.5333,"angle":11.44},{"time":0.6,"angle":17.23},{"time":0.7,"angle":4.74},{"time":0.7667,"angle":-20.69,"curve":0.243,"c3":0.649},{"time":0.9667,"angle":-20.41,"curve":0.382,"c2":0.57,"c3":0.735},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"back_thigh":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_arm2":{"rotate":[{},{"time":0.1,"angle":23.11},{"time":0.3,"angle":-75.93},{"time":0.5333,"angle":-1.41},{"time":0.7667,"angle":26.87},{"time":0.8333,"angle":-56.15},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_foot1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_thigh":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"gun":{"rotate":[{},{"time":0.1,"angle":15.28},{"time":0.3,"angle":-53.41},{"time":0.5667,"angle":-63.35},{"time":0.7667,"angle":-29.92},{"time":0.9,"angle":7.24},{"time":1,"angle":-3.7},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"head":{"rotate":[{},{"time":0.1,"angle":9.94},{"time":0.3,"angle":-3.77},{"time":0.5333,"angle":-26.64},{"time":0.7,"angle":-10.23},{"time":0.7667,"angle":21.8},{"time":0.8667,"angle":15.37},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_arm2":{"rotate":[{},{"time":0.1,"angle":23.11},{"time":0.3,"angle":-75.93},{"time":0.5333,"angle":-1.41},{"time":0.7667,"angle":26.87},{"time":0.8333,"angle":-56.15},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_foot1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_front2":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_rear2":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"spineboy_torso":{"rotate":[{},{"time":0.1667,"angle":-24.94},{"time":0.2333,"angle":-20.34},{"time":0.5333,"angle":-11.2},{"time":0.7,"angle":10.49},{"time":0.8333,"angle":-30.21,"curve":0.25,"c3":0.75},{"time":1,"angle":1.35},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"stirrup_strap2":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"tail4":{"rotate":[{},{"time":0.1,"angle":34.12},{"time":0.3,"angle":-12.25},{"time":0.4333,"angle":11.11},{"time":0.5333,"angle":25.19},{"time":0.6,"angle":32.5},{"time":0.7,"angle":24.41},{"time":0.7667,"angle":9.91,"curve":0.243,"c3":0.649},{"time":0.9667,"angle":-11.72,"curve":0.382,"c2":0.57,"c3":0.735},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"back_arm":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"back_knee":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_arm":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_foot2":{"rotate":[{"curve":"stepped"},{"time":0.3},{"time":0.3667,"angle":-63.6},{"time":0.4333,"angle":-80.16},{"time":0.5333,"angle":-17.48},{"time":0.6667,"angle":24.85},{"time":0.7667,"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":0.6667,"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":0.6667,"curve":"stepped"},{"time":1.0667}]},"front_hand":{"rotate":[{},{"time":0.5333,"angle":-27.75},{"time":0.7667,"angle":-27.1},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"horn_front":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"horn_rear":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"jaw":{"rotate":[{"angle":15.57},{"time":0.2333,"angle":-0.93},{"time":0.5,"angle":20.4},{"time":0.7,"angle":18.33},{"time":0.7667,"angle":5.17},{"time":0.8333,"angle":20.34},{"time":1.0667,"angle":15.57}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"lower_leg":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"neck2":{"rotate":[{},{"time":0.1,"angle":11.08},{"time":0.8333,"angle":8.17},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_foot2":{"rotate":[{"curve":"stepped"},{"time":0.3},{"time":0.3667,"angle":-87.94},{"time":0.4333,"angle":-126.75},{"time":0.5333,"angle":-63.79},{"time":0.7,"angle":24.85},{"time":0.7667,"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":0.7,"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":0.7,"curve":"stepped"},{"time":1.0667}]},"rear_hand":{"rotate":[{},{"time":0.5333,"angle":-27.75},{"time":0.7667,"angle":-27.1},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_rear3":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"tail5":{"rotate":[{},{"time":0.1,"angle":76.87},{"time":0.3,"angle":-12.25},{"time":0.4333,"angle":10.51},{"time":0.5333,"angle":24.82},{"time":0.6,"angle":32.22},{"time":0.7,"angle":24.41},{"time":0.7667,"angle":9.91,"curve":0.243,"c3":0.649},{"time":0.9667,"angle":-41.67,"curve":0.382,"c2":0.57,"c3":0.735},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"tongue1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"back_bracer":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_arm_target":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_bracer":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_foot3":{"rotate":[{"curve":"stepped"},{"time":0.3},{"time":0.3667,"angle":-84.17},{"time":0.4333,"angle":-127.53},{"time":0.5333,"angle":-52.16},{"time":0.6667,"angle":10.78},{"time":0.7667,"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":0.6667,"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":0.6667,"curve":"stepped"},{"time":1.0667}]},"head2":{"rotate":[{"angle":15.31},{"time":0.1,"angle":29.86},{"time":0.2,"angle":22.44},{"time":0.3,"angle":12.64},{"time":0.4667,"angle":24.86},{"time":0.5333,"angle":9.29},{"time":0.7,"angle":4.78},{"time":0.7667,"angle":37.9},{"time":0.8333,"angle":18.88,"curve":0.057,"c2":0.81,"c3":0.75},{"time":1,"angle":22.97},{"time":1.0667,"angle":15.31}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"rear_arm_target":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"tongue2":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"back_hand":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"front_hand2":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]},"tongue3":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":1.0667}]}}},"empty":{},"gungrab":{"slots":{"front_hand":{"attachment":[{"name":"front_open_hand"},{"time":0.1667,"name":"gun"}]},"gun":{"attachment":[{"name":"gun_nohand"},{"time":0.1667,"name":null}]}},"bones":{"front_hand2":{"rotate":[{},{"time":0.1333,"angle":12.34},{"time":0.1667,"angle":-89.55},{"time":0.2333,"angle":-79.79},{"time":0.4667,"angle":-10.18}],"scale":[{},{"time":0.1667,"x":0.938,"y":0.938},{"time":0.4667}]},"front_arm":{"rotate":[{},{"time":0.0667,"angle":-32},{"time":0.1667,"angle":223.11,"curve":0.25,"c3":0.75},{"time":0.2333,"angle":155.19,"curve":0.25,"c3":0.75},{"time":0.3667,"angle":246.14,"curve":0.184,"c2":0.34,"c3":0.75},{"time":0.4667,"angle":-56.75}],"translate":[{},{"time":0.1667,"x":6.5,"y":-2.66},{"time":0.2333,"x":6.84,"y":4.8},{"time":0.4667}]},"front_bracer":{"rotate":[{},{"time":0.1667,"angle":86.02},{"time":0.2333,"angle":114.95},{"time":0.3667,"angle":81.86,"curve":0.25,"c3":0.75},{"time":0.4667,"angle":34.74}]}},"ik":{"front_arm_goal":[{"mix":0}]}},"walk":{"bones":{"root":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"front_foot_goal":{"rotate":[{},{"time":0.2667,"angle":-51.26},{"time":0.4,"angle":-65.18},{"time":0.5333,"angle":-76.29},{"time":0.8,"angle":-76.53},{"time":1.0667}],"translate":[{"x":343.28,"y":36.5},{"time":0.2667,"x":86.51,"y":36.99},{"time":0.5333,"x":-173.36,"y":37.42},{"time":0.6,"x":-68.16,"y":141.15},{"time":0.7333,"x":91.79,"y":238.01},{"time":0.8,"x":155.9,"y":190.91},{"time":0.9667,"x":303.28,"y":94.41},{"time":1.0667,"x":343.28,"y":36.5}]},"hip":{"rotate":[{"angle":-4.78},{"time":0.0667,"angle":-3.99},{"time":0.2667,"angle":-12.5},{"time":0.5333,"angle":-4.78},{"time":0.6,"angle":-3.99},{"time":0.8,"angle":-12.5},{"time":1.0667,"angle":-4.78}],"translate":[{"x":161.93,"y":4.9,"curve":0.27,"c2":0.38,"c3":0.621,"c4":0.4},{"time":0.0667,"x":165.04,"y":-5.99,"curve":0.245,"c2":0.01,"c3":0.758},{"time":0.2667,"x":178.81,"y":136.53,"curve":0.25,"c3":0.841,"c4":0.81},{"time":0.5333,"x":161.93,"y":4.9,"curve":0.27,"c2":0.38,"c3":0.621,"c4":0.4},{"time":0.6,"x":165.04,"y":-5.99,"curve":0.245,"c2":0.01,"c3":0.758},{"time":0.8,"x":178.81,"y":136.52,"curve":0.25,"c3":0.859,"c4":0.82},{"time":1.0667,"x":161.93,"y":4.9}]},"rear_foot_goal":{"rotate":[{"angle":-62.73},{"time":0.2667,"angle":-107.17},{"time":0.4667,"angle":-40.52},{"time":0.8,"angle":-97.16},{"time":1.0667,"angle":-62.73}],"translate":[{"x":-266.7,"y":-15.47},{"time":0.1333,"x":-87.88,"y":124.85},{"time":0.2667,"x":88.36,"y":134.06},{"time":0.3667,"x":198.39,"y":90.65},{"time":0.4667,"x":308.19,"y":-26.42},{"time":0.6,"x":167.06,"y":-26.42},{"time":1.0667,"x":-266.7,"y":-15.47}]},"front_leg1":{"rotate":[{"angle":27.08},{"time":1.0667,"angle":31.39}],"translate":[{},{"time":0.0667,"x":-0.22,"y":15.2},{"time":0.5333,"x":-0.34,"y":12.16},{"time":0.7333,"x":-4.75,"y":31.94},{"time":1.0667}]},"front_leg_goal":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"x":-18.05,"y":-2.89},{"time":0.4333,"x":-42.2,"y":-88.63},{"time":0.5333,"x":-27.31,"y":-43.91},{"time":0.7333,"x":-1.52,"y":-94.29},{"time":0.8,"x":-24.29,"y":-116.41},{"time":1,"x":-41.88,"y":-93.3},{"time":1.0667,"x":-18.05,"y":-2.89}]},"rear_leg1":{"rotate":[{"angle":-64.85},{"time":1.0667,"angle":-45.72}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"rear_leg_goal":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"x":-2.05,"y":15.12},{"time":0.2667,"x":17.49,"y":-150.44},{"time":0.4667,"x":-40.21,"y":-81.76},{"time":0.5333,"x":-31.69,"y":-82.43},{"time":0.8,"x":2.65,"y":-169.22},{"time":0.9333,"x":-16.77,"y":-98.31},{"time":1.0667,"x":-2.05,"y":15.12}]},"tail1":{"rotate":[{"angle":1.31},{"time":0.0667,"angle":4.14},{"time":0.3333,"angle":-5.78},{"time":0.6333,"angle":4.14},{"time":0.9,"angle":-5.78},{"time":1.0667,"angle":1.31}],"translate":[{"curve":"stepped"},{"time":0.0667,"curve":"stepped"},{"time":1.0667}]},"torso1":{"rotate":[{"angle":7.22},{"time":0.2667,"angle":4.2},{"time":0.5333,"angle":7.22},{"time":0.8,"angle":4.2},{"time":1.0667,"angle":7.22}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"front_leg2":{"rotate":[{"angle":-347.28},{"time":1.0667,"angle":-362.06}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"rear_leg2":{"rotate":[{"angle":27.05},{"time":1.0667,"angle":9.93}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"saddle":{"rotate":[{"angle":-2.52},{"time":0.2667,"angle":-4.17},{"time":0.5333,"angle":-3.85},{"time":0.8,"angle":-3.1},{"time":1.0667,"angle":-2.52}],"translate":[{"curve":"stepped"},{"time":0.2667,"curve":0.15,"c2":0.28,"c3":0.75},{"time":0.3333,"x":-0.04,"y":5.92,"curve":0.421,"c3":0.85,"c4":0.78},{"time":0.5333},{"time":0.6,"x":-0.21,"y":-2.36},{"time":0.8,"curve":0.15,"c2":0.28,"c3":0.75},{"time":0.8667,"x":-0.04,"y":5.92,"curve":0.421,"c3":0.85,"c4":0.78},{"time":1.0667}]},"tail2":{"rotate":[{"angle":-19.16},{"time":0.2333,"angle":-11.31},{"time":0.5,"angle":-9.37},{"time":0.7667,"angle":-11.31},{"time":1.0333,"angle":-20.28},{"time":1.0667,"angle":-19.16}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"x":0.8},{"time":0.2333,"x":0.9},{"time":0.5,"x":0.8,"curve":"stepped"},{"time":1.0667,"x":0.8}]},"torso2":{"rotate":[{"angle":8.6},{"time":0.2667,"angle":9.53,"curve":0.25,"c3":0.75},{"time":0.5333,"angle":8.01},{"time":0.8,"angle":5.48,"curve":0.25,"c3":0.75},{"time":1.0667,"angle":8.6}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"front_arm1":{"rotate":[{},{"time":0.5,"angle":-367.83},{"time":1.0667}],"translate":[{"x":20.65,"y":-7.55},{"time":0.5,"x":-2.87,"y":3.33},{"time":0.8,"x":24.1,"y":-1.47},{"time":0.9333,"x":21.73,"y":-3.71},{"time":1.0667,"x":20.65,"y":-7.55}]},"front_leg3":{"rotate":[{"angle":1.14,"curve":"stepped"},{"time":1.0667,"angle":1.14}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"neck":{"rotate":[{"angle":6.5},{"time":0.2667,"angle":12.71},{"time":0.5333,"angle":6.5},{"time":0.8,"angle":12.71},{"time":1.0667,"angle":6.5}],"translate":[{"x":12.6,"y":-31.3},{"time":0.2667,"x":-10.84,"y":-72.29,"curve":0.204,"c2":0.02,"c3":0.861,"c4":0.87},{"time":0.5333,"x":12.6,"y":-31.3},{"time":0.8,"x":-10.84,"y":-72.29,"curve":0.204,"c2":0.02,"c3":0.861,"c4":0.87},{"time":1.0667,"x":12.6,"y":-31.3}]},"rear_arm1":{"rotate":[{},{"time":0.5,"angle":13.72},{"time":1.0667}],"translate":[{},{"time":0.5,"x":11.13,"y":-13.39},{"time":1.0667}]},"rear_leg3":{"rotate":[{"angle":-23.19,"curve":"stepped"},{"time":1.0667,"angle":-23.19}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_front1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_rear1":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"tail3":{"rotate":[{"angle":-12.46},{"time":0.2333,"angle":12.66},{"time":0.5,"angle":-20.8},{"time":0.7667,"angle":12.66},{"time":1.0333,"angle":-16.05},{"time":1.0667,"angle":-12.46}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":0.2333},{"time":0.5,"x":0.998},{"time":1.0667}]},"front_arm2":{"rotate":[{},{"time":0.5,"angle":22.44},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"front_foot1":{"rotate":[{"angle":-41.33,"curve":"stepped"},{"time":1.0667,"angle":-41.33}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"head":{"rotate":[{"angle":-7.36},{"time":0.1333,"angle":-12.99,"curve":0.25,"c3":0.75},{"time":0.4,"angle":-6.12},{"time":0.5333,"angle":-7.36},{"time":0.6667,"angle":-12.99,"curve":0.25,"c3":0.75},{"time":0.9333,"angle":-6.12},{"time":1.0667,"angle":-7.36}],"translate":[{"x":-3.88,"y":-32.87},{"time":0.9333,"x":-3.33,"y":-22.82},{"time":1.0667,"x":-3.88,"y":-32.87}]},"rear_arm2":{"rotate":[{},{"time":0.5,"angle":-30.21},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"rear_foot1":{"rotate":[{"angle":2.07,"curve":"stepped"},{"time":1.0667,"angle":2.07}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_front2":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_rear2":{"rotate":[{"angle":-4.45},{"time":0.1,"angle":-2.67},{"time":0.3,"angle":-0.35},{"time":0.4333,"angle":-1.71},{"time":0.6333,"angle":-2.55},{"time":0.9,"angle":-0.51},{"time":1.0667,"angle":-4.45}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"stirrup":{"rotate":[{},{"time":0.2667,"angle":-4.96},{"time":0.5333},{"time":0.8,"angle":-4.96},{"time":1.0667}],"translate":[{"x":8.98,"y":4.99},{"time":0.2667,"x":4.85,"y":1},{"time":0.5333,"x":7.76,"y":-2.99},{"time":0.8,"x":4.85,"y":1},{"time":1.0667,"x":8.98,"y":4.99}]},"tail4":{"rotate":[{"angle":10.25},{"time":0.2333,"angle":39.48,"curve":0.25,"c3":0.75},{"time":0.5,"angle":1.33},{"time":0.7667,"angle":39.48,"curve":0.665,"c3":0.75},{"time":1.0333,"angle":6.08},{"time":1.0667,"angle":10.25}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"curve":"stepped"},{"time":0.2333,"curve":"stepped"},{"time":0.5,"curve":"stepped"},{"time":1.0667}]},"front_foot2":{"rotate":[{"angle":36.9},{"time":0.0667,"angle":7.88},{"time":0.1333,"angle":4.67},{"time":0.4,"angle":7.59},{"time":0.5333,"angle":8.08},{"time":0.6667,"angle":-67.33},{"time":0.7333,"angle":-65.24},{"time":1,"angle":27.75},{"time":1.0667,"angle":36.9}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"front_hand":{"rotate":[{"angle":9.49},{"time":0.5,"angle":-48.61},{"time":1.0667,"angle":9.49}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"horn_front":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{},{"time":0.2667,"x":-7.18,"y":-1.38},{"time":0.5333},{"time":0.8,"x":-7.18,"y":-1.38},{"time":1.0667}]},"horn_rear":{"rotate":[{"curve":"stepped"},{"time":1.0667}],"translate":[{},{"time":0.2667,"x":12.34,"y":9.16},{"time":0.5333},{"time":0.8,"x":12.34,"y":9.16},{"time":1.0667}]},"jaw":{"rotate":[{"angle":25.56},{"time":0.2,"angle":21.27},{"time":0.3333,"angle":21.36},{"time":0.6667,"angle":15.61},{"time":0.8667,"angle":22.97},{"time":1.0667,"angle":25.56}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"rear_foot2":{"rotate":[{},{"time":0.1333,"angle":-82.38},{"time":0.2667,"angle":-110.31},{"time":0.4333,"angle":36.22},{"time":0.5333,"angle":2.1},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"rear_hand":{"rotate":[{"angle":-28.89},{"time":0.5,"angle":12.2},{"time":1.0667,"angle":-28.89}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"saddle_strap_rear3":{"rotate":[{"angle":-1.32},{"time":0.1,"angle":0.46},{"time":0.3,"angle":2.78},{"time":0.4333,"angle":1.42},{"time":0.6333,"angle":0.58},{"time":0.9,"angle":2.62},{"time":1.0667,"angle":-1.32}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"tail5":{"rotate":[{"angle":-26.35,"curve":0.391,"c2":-0.58,"c3":0.654,"c4":1.01},{"time":0.2333,"angle":45.42,"curve":0.391,"c2":-0.58,"c3":0.654,"c4":1.01},{"time":0.5,"angle":-21.93,"curve":0.391,"c2":-0.58,"c3":0.654,"c4":1.01},{"time":0.7667,"angle":45.42,"curve":0.391,"c2":-0.58,"c3":0.654,"c4":1.01},{"time":1.0333,"angle":-7.73},{"time":1.0667,"angle":-26.35}],"translate":[{"curve":"stepped"},{"time":1.0667}],"scale":[{"x":0.765},{"time":0.2333},{"time":0.5,"x":0.765},{"time":0.7667},{"time":1.0667,"x":0.765}]},"tongue1":{"rotate":[{},{"time":0.3333,"angle":7.55},{"time":0.6667,"angle":-1.69},{"time":0.9333,"angle":8.11},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"front_foot3":{"rotate":[{"angle":-1.65},{"time":0.0667,"angle":-5.29},{"time":0.1333,"angle":-3.94},{"time":0.2667,"angle":-3.82},{"time":0.5333,"angle":-5.89},{"time":0.6,"angle":-21.21},{"time":0.6667,"angle":-73.64},{"time":0.7333,"angle":-102.82},{"time":0.8333,"angle":-41.3},{"time":1,"angle":10.93},{"time":1.0667,"angle":-1.65}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"tongue2":{"rotate":[{},{"time":0.3333,"angle":7.55},{"time":0.6667,"angle":-1.69},{"time":0.9333,"angle":8.11},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"tongue3":{"rotate":[{},{"time":0.3333,"angle":7.55},{"time":0.6667,"angle":-1.69},{"time":0.9333,"angle":8.11},{"time":1.0667}],"translate":[{"curve":"stepped"},{"time":1.0667}]},"head2":{"rotate":[{"angle":38.6},{"time":0.2667,"angle":43.19},{"time":0.5333,"angle":38.6},{"time":0.8,"angle":43.19},{"time":1.0667,"angle":38.6}]},"neck2":{"rotate":[{"angle":9.65},{"time":0.2667,"angle":14.71},{"time":0.5333,"angle":9.65},{"time":0.8,"angle":14.71},{"time":1.0667,"angle":9.65}]},"spineboy_hip":{"translate":[{"x":32.54,"y":1.34,"curve":0.413,"c3":0.873,"c4":0.78},{"time":0.2667,"x":-12.88,"y":0.58,"curve":0.139,"c2":0.18,"c3":0.75},{"time":0.5333,"x":32.54,"y":1.34,"curve":0.367,"c3":0.867,"c4":0.82},{"time":0.8,"x":-12.88,"y":0.58,"curve":0.164,"c2":0.17,"c3":0.75},{"time":1.0667,"x":32.54,"y":1.34}]},"spineboy_torso":{"rotate":[{"angle":-37.93},{"time":0.2667,"angle":-29.48,"curve":0.493,"c3":0.75},{"time":0.5333,"angle":-37.93},{"time":0.8,"angle":-29.48,"curve":0.493,"c3":0.75},{"time":1.0667,"angle":-37.71}]},"front_arm":{"translate":[{},{"time":0.3333,"x":-14.43,"y":-11.03},{"time":0.5333},{"time":0.8,"x":-14.43,"y":-11.03},{"time":1.0667}]},"gun":{"rotate":[{"angle":-11.68,"curve":0.379,"c2":0.6,"c3":0.724},{"time":0.0667,"angle":-17.6},{"time":0.3333,"angle":14.46,"curve":0.25,"c3":0.75},{"time":0.6,"angle":-24.74,"curve":0.326,"c2":0.01,"c3":0.716},{"time":0.8667,"angle":14.46,"curve":0.242,"c3":0.667,"c4":0.67},{"time":1.0667,"angle":-11.68}],"translate":[{"x":0.84,"y":-3.82},{"time":0.0667},{"time":0.3333,"x":3.38,"y":-15.28},{"time":0.6},{"time":0.8667,"x":3.38,"y":-15.28},{"time":1.0667,"x":0.84,"y":-3.82}]}},"deform":{"default":{"raptor_body":{"raptor_body":[{},{"time":0.2667,"offset":314,"vertices":[-16.78684,15.47479,-0.63025,22.82083,18.11511,13.89255,19.32452,12.15424,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.24548,0.81152,-3.24548,0.81152,-3.24548,0.81152,-3.24548,0.81152,-3.24548,0.81152,-3.24548,0.81152,0,0,0,0,0,0,-3.24548,0.81152,0,0,-3.24548,0.81152]},{"time":0.5333},{"time":0.8,"offset":314,"vertices":[-16.78684,15.47479,-0.63025,22.82083,18.11511,13.89255,19.32452,12.15424,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.24548,0.81152,-3.24548,0.81152,-3.24548,0.81152,-3.24548,0.81152,-3.24548,0.81152,-3.24548,0.81152,0,0,0,0,0,0,-3.24548,0.81152,0,0,-3.24548,0.81152]},{"time":1.0667}]},"raptor_front_leg":{"raptor_front_leg":[{"curve":"stepped"},{"time":0.2667},{"time":0.5333,"offset":138,"vertices":[-2.23608,21.95403,21.54916,-4.7554]},{"time":0.6,"offset":138,"vertices":[7.17963,15.14358,15.26523,-6.91742]},{"time":0.7333,"offset":110,"vertices":[-0.82486,0.73407,-0.01285,-1.10443,0,0,0,0,1.4866,-2.59427,0.98071,2.82343,2.7366,-10.49936,6.12506,8.95282,-2.60873,-2.28384,3.43417,-0.47046,-2.28305,-4.76038,5.08893,1.40079,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.37967,-1.75516,-2.1323,-0.65668,-2.8624,-0.77365,2.4599,-1.6532]},{"time":0.8,"curve":"stepped"},{"time":0.9667,"curve":"stepped"},{"time":1.0667}]}}}}}},[0]]],0,0,[0],[-1],[18]],[[[100,"../Light2D/light-shadow-mesh",[{"hash":2940196648,"name":"../Light2D/light-shadow-mesh|mesh-vs:vert|mesh-fs:frag","blocks":[{"name":"PARAMS","stageFlags":16,"binding":0,"members":[{"name":"color","type":16,"count":1},{"name":"sourceId","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"PARAMS","stageFlags":16,"binding":0,"members":[{"name":"color","type":16,"count":1},{"name":"sourceId","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nin vec3 a_position;\nout vec3 fragPos;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    fragPos = (cc_matWorld * pos).xyz;\n    pos = cc_matWorld * pos;\n  #else\n    fragPos = a_position;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nin vec3 fragPos;\nlayout(std140) uniform PARAMS{\n  vec4 color;\n  float sourceId;\n};\nvec4 setBitmask(float id) {\n  int idx = int(id);\n  int channel = idx / 8;\n  int bit = idx -  channel* 8;\n  float v = pow(2.0, float(bit)) / 255.0;\n  if (channel == 0) return vec4(v, 0.0, 0.0, 0.0);\n  if (channel == 1) return vec4(0.0, v, 0.0, 0.0);\n  if (channel == 2) return vec4(0.0, 0.0, v, 0.0);\n  if (channel == 3) return vec4(0.0, 0.0, 0.0, v);\n  return vec4(0.0);\n}\nvec4 frag () {\n  if(sourceId < 0.0) return vec4(0.0);\n  return setBitmask(sourceId);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nvarying vec3 fragPos;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    fragPos = (cc_matWorld * pos).xyz;\n    pos = cc_matWorld * pos;\n  #else\n    fragPos = a_position;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec3 fragPos;\n   uniform float sourceId;\nvec4 setBitmask(float id) {\n  int idx = int(id);\n  int channel = idx / 8;\n  int bit = idx -  channel* 8;\n  float v = pow(2.0, float(bit)) / 255.0;\n  if (channel == 0) return vec4(v, 0.0, 0.0, 0.0);\n  if (channel == 1) return vec4(0.0, v, 0.0, 0.0);\n  if (channel == 2) return vec4(0.0, 0.0, v, 0.0);\n  if (channel == 3) return vec4(0.0, 0.0, 0.0, v);\n  return vec4(0.0);\n}\nvec4 frag () {\n  if(sourceId < 0.0) return vec4(0.0);\n  return setBitmask(sourceId);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":2}},"defines":[{"name":"USE_LOCAL","type":"boolean"}]}],[{"passes":[{"program":"../Light2D/light-shadow-mesh|mesh-vs:vert|mesh-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"color":{"type":16,"value":[0,0,0,1]},"sourceId":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5cWA3fFVNJ74LqiKWHHEQ8"]}],[3],0,[],[],[]],[[{"name":"woodbox","rect":{"x":0,"y":0,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-128,-128,0,128,-128,0,-128,128,0,128,128,0],"indexes":[0,1,2,2,1,3],"uv":[0,256,256,256,0,0,256,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-128,"y":-128,"z":0},"maxPos":{"x":128,"y":128,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[19]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["77N7ckL7FJ14zEMy+45Nye"]}],[3],0,[],[],[]],[[{"name":"ground","rect":{"x":0,"y":0,"width":32,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-16,-16,0,16,-16,0,-16,16,0,16,16,0],"indexes":[0,1,2,2,1,3],"uv":[0,32,32,32,0,0,32,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-16,"y":-16,"z":0},"maxPos":{"x":16,"y":16,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[20]],[[{"name":"unityspritelight","rect":{"x":0,"y":0,"width":326,"height":326},"offset":{"x":0,"y":0},"originalSize":{"width":326,"height":326},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[5]],[[{"name":"lighttag","rect":{"x":326,"y":150,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[5]],[[{"name":"Cocos_Logo","rect":{"x":326,"y":0,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[5]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["8740oGAvNIF4qZVY2vbcSI"]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["9eD+IIYvtGcITkond7gtA9"]}],[3],0,[],[],[]],[[[102,"smilesans_mini","smilesans_mini.ttf"],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["b7A/j6fm1OjYbyMoDqfcr8"]}],[3],0,[],[],[]],[[{"name":"whiterect","rect":{"x":0,"y":0,"width":64,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-32,-32,0,32,-32,0,-32,32,0,32,32,0],"indexes":[0,1,2,2,1,3],"uv":[0,64,64,64,0,0,64,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-32,"y":-32,"z":0},"maxPos":{"x":32,"y":32,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[21]],[[[103,"default-physics-material",0.8,0.1,0.1,0.1]],0,0,[],[],[]],[[[104,"light-shadow-mesh",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[25],[22]],[[[105,"map","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.0\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"30\" height=\"30\" tilewidth=\"32\" tileheight=\"32\" nextobjectid=\"3\">\n <tileset firstgid=\"1\" name=\"barriers\" tilewidth=\"32\" tileheight=\"32\" tilecount=\"36\" columns=\"6\">\n  <image source=\"barriers.png\" width=\"192\" height=\"192\"/>\n  <tile id=\"0\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"1\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"2\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"3\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"4\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"5\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"6\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"7\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"8\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"9\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"10\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"11\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"12\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"13\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"14\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"15\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"16\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"17\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"18\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"19\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"20\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"21\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"22\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"23\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"24\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"25\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"26\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"27\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"28\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"29\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"30\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"31\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"32\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"33\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"34\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n  <tile id=\"35\">\n   <properties>\n    <property name=\"barrier\" value=\"true\"/>\n   </properties>\n  </tile>\n </tileset>\n <tileset firstgid=\"37\" name=\"ground\" tilewidth=\"32\" tileheight=\"32\" tilecount=\"1\" columns=\"1\">\n  <image source=\"ground.png\" width=\"32\" height=\"32\"/>\n  <tile id=\"0\">\n   <properties>\n    <property name=\"floor\" value=\"true\"/>\n   </properties>\n  </tile>\n </tileset>\n <layer name=\"floor\" width=\"30\" height=\"30\">\n  <properties>\n   <property name=\"floor\" value=\"true\"/>\n  </properties>\n  <data encoding=\"base64\" compression=\"zlib\">\n   eJztwwENAAAMw6CamX+LF3JIWDVVVVXfPeR1ghU=\n  </data>\n </layer>\n <layer name=\"barrier\" width=\"30\" height=\"30\">\n  <properties>\n   <property name=\"barrier\" value=\"true\"/>\n  </properties>\n  <data encoding=\"base64\" compression=\"zlib\">\n   eJy1VmtPwzAMNAO6AWFjSr/yEvz/30gietLtZjsdGpastV3js8+v7s1sf0V9bfq24r2XK+N+Nf0evHNs+mB/k4mu66Jrz20dXNiYF43sleDcNPCjCO5N003T24GvjBPZraR3Te/lHOP26x3dwy7OVTuNUe1F8tj0KcF9tt+cH+j/6pwzec68gjPljfPF+UU+WSbLBWcK3YOzSnb5fbPz/KrNYnmNerkDZ+DNwzXB5VoweRbl0suB+gZh/qJ4L7FfzfdZpfOHXEa4Xnzd36jX1mBnPKPuvPhQD7sA+xJZw3OlX+Byn2eCHluDq/0DDrpG9cp5Yb47R15uuH9xNuqfLLdR3YEj9LPimnNW+0nnqIfh+ds50r2X5Vdt8BzNajbCPtC94mqMmmv8zzn39o1i6zPFnQVLdywLZoCX29FO9XjOsKJdofFxLXj7xsONfOXdM8LlWtA88D5in3gmZVzxTtWY2A8vD1686LdoLkV8TMG1+sG4zAU4Ojq4HXMO/OF5Uyz/3gRuxIXa1/ns7WrPD+23bG5sl9j4f53PsDnbef3oNzDHxriak2wu6kzJvv+8a8bVHhnN46zPR9Jtb0jfm340/ZTn/6E/3g4VKg==\n  </data>\n </layer>\n <objectgroup name=\"players\" visible=\"0\">\n  <object id=\"1\" name=\"SpawnPoint\" x=\"143\" y=\"914\">\n   <ellipse/>\n  </object>\n  <object id=\"2\" name=\"SuccessPoint\" x=\"655\" y=\"80\">\n   <ellipse/>\n  </object>\n </objectgroup>\n</map>\n",["barriers.png","ground.png"],[0,1],[[[5,192,192],[5,32,32]],8,8]]],0,0,[0,0],[-1,-2],[23,24]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["c3RuVzyBNFwKMJ8DKkGwDs"]}],[3],0,[],[],[]],[[{"name":"gecko","rect":{"x":0,"y":0,"width":619,"height":642},"offset":{"x":0,"y":0},"originalSize":{"width":619,"height":642},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-309.5,-321,0,309.5,-321,0,-309.5,321,0,309.5,321,0],"indexes":[0,1,2,2,1,3],"uv":[0,642,619,642,0,0,619,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-309.5,"y":-321,"z":0},"maxPos":{"x":309.5,"y":321,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[25]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["d1qIq5c0tC7KIH9BVPXbmL"]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["d4COwJmhNPS7QuOe2dKBh4"]}],[3],0,[],[],[]],[[{"name":"barriers","rect":{"x":0,"y":0,"width":192,"height":192},"offset":{"x":0,"y":0},"originalSize":{"width":192,"height":192},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-96,-96,0,96,-96,0,-96,96,0,96,96,0],"indexes":[0,1,2,2,1,3],"uv":[0,192,192,192,0,0,192,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-96,"y":-96,"z":0},"maxPos":{"x":96,"y":96,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[3],[26]],[[[101,"../Light2D/light-receiver",[{}],[{"hash":2974629144,"name":"../Light2D/light-receiver|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"LightUniforms","stageFlags":16,"binding":1,"members":[{"name":"lightPositionsArr","type":16,"count":20},{"name":"lightColorsArr","type":16,"count":20},{"name":"lightParamsArr","type":16,"count":20},{"name":"customTextureIndexArr","type":16,"count":4}],"defines":[]},{"name":"LightParametric","stageFlags":16,"binding":2,"members":[{"name":"lightExtraDataArr","type":16,"count":20},{"name":"lightExtraDataArr2","type":16,"count":20},{"name":"customArr","type":16,"count":64}],"defines":[]},{"name":"PARAMS","stageFlags":16,"binding":3,"members":[{"name":"shadowMaskArea","type":16,"count":1},{"name":"shadowMaskOffset","type":16,"count":1},{"name":"ambientColor","type":16,"count":1},{"name":"ambientIntensity","type":13,"count":1},{"name":"ambientOnOffResult","type":13,"count":1},{"name":"bitmaskId","type":13,"count":1},{"name":"useNormalMap","type":13,"count":1},{"name":"lightCount","type":13,"count":1},{"name":"lightOnOff","type":13,"count":1},{"name":"shadowOnOff","type":13,"count":1},{"name":"inEditMode","type":13,"count":1},{"name":"customPolygonCount","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shadowMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":4,"defines":[]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":5,"defines":[]},{"name":"spriteLightTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":6,"defines":[]},{"name":"polygonDataTextureHigh","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":7,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]},{"name":"a_color2","format":44,"location":3,"defines":["TWO_COLORED"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"local"},"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"LightUniforms","stageFlags":16,"binding":1,"members":[{"name":"lightPositionsArr","type":16,"count":20},{"name":"lightColorsArr","type":16,"count":20},{"name":"lightParamsArr","type":16,"count":20},{"name":"customTextureIndexArr","type":16,"count":4}],"defines":[]},{"name":"LightParametric","stageFlags":16,"binding":2,"members":[{"name":"lightExtraDataArr","type":16,"count":20},{"name":"lightExtraDataArr2","type":16,"count":20},{"name":"customArr","type":16,"count":64}],"defines":[]},{"name":"PARAMS","stageFlags":16,"binding":3,"members":[{"name":"shadowMaskArea","type":16,"count":1},{"name":"shadowMaskOffset","type":16,"count":1},{"name":"ambientColor","type":16,"count":1},{"name":"ambientIntensity","type":13,"count":1},{"name":"ambientOnOffResult","type":13,"count":1},{"name":"bitmaskId","type":13,"count":1},{"name":"useNormalMap","type":13,"count":1},{"name":"lightCount","type":13,"count":1},{"name":"lightOnOff","type":13,"count":1},{"name":"shadowOnOff","type":13,"count":1},{"name":"inEditMode","type":13,"count":1},{"name":"customPolygonCount","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shadowMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":4,"defines":[]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":5,"defines":[]},{"name":"spriteLightTexture","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":6,"defines":[]},{"name":"polygonDataTextureHigh","type":28,"count":1,"stageFlags":16,"sampleType":0,"binding":7,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\n#if TWO_COLORED\n  in vec4 a_color2;\n#endif\nout vec4 v_color;\n#if TWO_COLORED\n  out vec4 v_dark;\n#endif\nout vec4 color;\nout vec2 uv0;\nout vec3 worldPos;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    worldPos = (cc_matWorld * pos).xyz;\n    pos = cc_matWorld * pos;\n  #else\n    worldPos = a_position;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n #if TWO_COLORED\n    v_dark = a_color2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  vec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n  #if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n  #else\n    return texture(tex, uv);\n  #endif\n  }\n  #if USE_ALPHA_TEST\n    layout(std140) uniform ALPHA_TEST_DATA {\n      float alphaThreshold;\n    };\n  #endif\n  void ALPHA_TEST (in vec4 color) {\n    #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n    #endif\n  }\n  void ALPHA_TEST (in float alpha) {\n    #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n    #endif\n  }\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  in vec4 color;\n  in vec3 worldPos;\n  in vec2 uv0;\n  #if TWO_COLORED\n    in vec4 v_dark;\n  #endif\n  uniform sampler2D shadowMap;\n  uniform sampler2D normalMap;\n  uniform sampler2D spriteLightTexture;\n  uniform sampler2D polygonDataTextureHigh;\n  layout(std140) uniform LightUniforms {\n    vec4  lightPositionsArr[20];\n    vec4  lightColorsArr[20];\n    vec4  lightParamsArr[20];\n    vec4  customTextureIndexArr[16/4];\n  };\n  layout(std140) uniform LightParametric{\n    vec4  lightExtraDataArr[20];\n    vec4  lightExtraDataArr2[20];\n    vec4  customArr[64];\n  };\n  layout(std140) uniform PARAMS{\n     vec4 shadowMaskArea;\n     vec4 shadowMaskOffset;\n     vec4 ambientColor;\n     float ambientIntensity;\n     float ambientOnOffResult;\n     float bitmaskId;\n     float useNormalMap;\n     float lightCount;\n     float lightOnOff;\n     float  shadowOnOff;\n     float  inEditMode;\n     float customPolygonCount;\n  };\n    uniform sampler2D cc_spriteTexture;\n  float intPow10(float base, float fexp) {\n    float t1 = clamp(fexp, 0.0, 10.0);\n    int exponent = int(t1);\n    float powers[11];\n    powers[0] = 1.0;\n    powers[1] = base;\n    float b2 = base * base;\n    powers[2] = b2;\n    float b3 = b2 * base;\n    powers[3] = b3;\n    float b4 = b2 * b2;\n    powers[4] = b4;\n    powers[5] = b4 * base;\n    powers[6] = b4 * b2;\n    powers[7] = b4 * b3;\n    powers[8] = b4 * b4;\n    powers[9] = b4 * b4 * base;\n    powers[10] = b4 * b4 * b2;\n    return powers[exponent];\n  }\n  float normalizeDeg(float deg) {\n    return mod(mod(deg + 180.0, 360.0) + 360.0, 360.0) - 180.0;\n  }\n  bool inAngleRange(float deg, float start, float end) {\n    float r = mod(end - start + 360.0, 360.0);\n    if (abs(end - start) >= 359.99) return true;\n    float d = mod(deg - start + 360.0, 360.0);\n    return d <= r;\n  }\n  bool isFLoatEqual(float a, float b) {\n      return abs(a - b) < 1e-4;\n  }\n  vec3 calculatePointLight(\n      vec3 normalVec,\n      vec3 baseColor,\n      vec3 fragWorldPos,\n      vec4 lightPosData,\n      vec4 lightColorData,\n      vec4 lightParamData,\n      vec4 lightExtraData,\n      vec4 lightExtraData2\n  ) {\n      vec3 lightWorldPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float blendMode = lightParamData.y;\n      float falloff = lightExtraData.w;\n      float innerRadius = lightExtraData.x;\n      float innerAngleStart = lightExtraData.y;\n      float innerAngleEnd = lightExtraData.z;\n      float outerAngleStart = lightExtraData2.x;\n      float outerAngleEnd = lightExtraData2.y;\n      float outerRadius = lightExtraData2.z;\n      float nodeAngle = lightExtraData2.w;\n      vec2 relPxOri = fragWorldPos.xy - lightWorldPos.xy;\n      float distPx = dot(relPxOri, relPxOri);\n      if (distPx > outerRadius * outerRadius) {\n        return vec3(0.0);\n      }\n      float cosA = cos(nodeAngle);\n      float sinA = sin(nodeAngle);\n      vec2 relPx = vec2(\n        dot(relPxOri, vec2(cosA, -sinA)),\n        dot(relPxOri, vec2(sinA, cosA))\n      );\n      float t = 1.0;\n      if (distPx > innerRadius * innerRadius) {\n        float dis = sqrt(distPx);\n        t = 1.0 - smoothstep(innerRadius, outerRadius, dis);\n        t = intPow10(t, falloff);\n      }\n      float angle = atan(relPx.y, relPx.x);\n      float deg = degrees(angle);\n      deg = normalizeDeg(deg);\n      float aInnerStart = degrees(innerAngleStart);\n      float aInnerEnd = degrees(innerAngleEnd);\n      float aOuterStart = degrees(outerAngleStart);\n      float aOuterEnd =degrees (outerAngleEnd);\n      if(!inAngleRange(deg, aOuterStart, aOuterEnd)) {\n        return vec3(0.0);\n      }\n      float angleAtten = 0.0;\n      float totalAngle = abs(aOuterEnd - aOuterStart);\n      if (totalAngle >= 360.0) {\n        angleAtten = 1.0;\n      } else if (inAngleRange(deg, aInnerStart, aInnerEnd)) {\n        angleAtten = 1.0;\n      } else if (inAngleRange(deg, aOuterStart, aInnerStart)) {\n        float edgeLen = mod(aInnerStart - aOuterStart + 360.0, 360.0);\n        float s = mod(deg - aOuterStart + 360.0, 360.0) / edgeLen;\n        angleAtten = intPow10(s, falloff);\n      } else if (inAngleRange(deg, aInnerEnd, aOuterEnd)) {\n        float edgeLen = mod(aOuterEnd - aInnerEnd + 360.0, 360.0);\n        float s = mod(aOuterEnd - deg + 360.0, 360.0) / edgeLen;\n        angleAtten = intPow10(s, falloff);\n      } else {\n        angleAtten = 0.0;\n      }\n      float attenuation = t * angleAtten;\n      if (attenuation <= 0.001) {\n        return vec3(0.0);\n      };\n      vec3 lightDir = normalize(vec3(-relPx, 0.0));\n      float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) == 0.0) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n      return baseColor*lightColor * attenuation * diffuse * intensity;\n  }\n  float sdPolygon(vec2 p, float radius, float sides) {\n    float sideCount = max(3.0, floor(sides + 0.5));\n    float angleStep = 6.2831853 / sideCount;\n    float a = atan(p.y, p.x) + 3.1415926;\n    float r = length(p);\n    float segmentAngle = floor((a + angleStep * 0.5) / angleStep) * angleStep;\n    float distToEdge = r * cos(segmentAngle - a) - radius * cos(angleStep * 0.5);\n    float distToVertex = r - radius;\n    return max(distToEdge, distToVertex);\n  }\n  vec3 calculateParametricRegularPolygon(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    float radius = max(0.1, lightExtraData.x);\n    float sides = max(3.0, lightExtraData.y);\n    float falloffRange = lightExtraData2.y;\n    float  falloffExponent = lightExtraData2.x;\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float cosA = lightExtraData.z;\n    float sinA = lightExtraData.w;\n    vec2 rel = vec2(\n      dot(relativePos, vec2(cosA, -sinA)),\n      dot(relativePos, vec2(sinA, cosA))\n    );\n    float dist = length(rel);\n    float attenuationDistance =  falloffRange;\n    if (dist > (radius + attenuationDistance)) return vec3(0.0);\n    float sdDist = sdPolygon(rel, radius, sides);\n    float attenuation = 0.0;\n    if (sdDist <= 0.0) {\n      attenuation = intensity;\n    } else if (sdDist < attenuationDistance) {\n      float normalizedDist = sdDist / attenuationDistance;\n      float t = intPow10(1.0 - normalizedDist, falloffExponent);\n      attenuation = intensity * clamp(t, 0.0, 1.0);\n    }\n    vec3 lightDir = normalize(vec3(-rel, 0.0));\n    float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) == 0.0) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n    return baseColor*lightColor * attenuation * diffuse;\n  }\n  float sdBox( vec2 p, vec2 b )\n  {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n  }\n  vec3 calculateParametricRectangleLight(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n      vec3 lightPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float width = max(0.1, lightExtraData.x);\n      float height = max(0.1, lightExtraData.y);\n      float falloffRange = lightExtraData2.y;\n      float falloffExponent = lightExtraData2.x;\n      vec2 halfSize = vec2(width * 0.5, height * 0.5);\n      vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n      float cosA = lightExtraData.z;\n      float sinA = lightExtraData.w;\n      vec2 rel = vec2(\n          dot(relativePos, vec2(cosA, -sinA)),\n          dot(relativePos, vec2(sinA, cosA))\n      );\n      float attenuationDistance =  falloffRange;\n      float maxDist = length(halfSize) + attenuationDistance;\n      if (length(rel) > maxDist) return vec3(0.0);\n      float sdDist = sdBox(rel, halfSize);\n      float attenuation = 0.0;\n      if (sdDist <= 0.0) {\n        attenuation = intensity;\n      } else if (sdDist < attenuationDistance) {\n        float normalizedDist = sdDist / attenuationDistance;\n        float t = intPow10(1.0 - normalizedDist,falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n      }\n      vec3 lightDir = normalize(vec3(-rel, 0.0));\n      float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) < 0.001) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n      return baseColor * lightColor * attenuation * diffuse;\n  }\n  vec3 calculateParametricCircleLight(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n      vec3 lightPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float radius = max(0.1, lightExtraData.x);\n      float falloffRange = lightExtraData2.y;\n      float falloffExponent = lightExtraData2.x;\n      float cosA = lightExtraData.z;\n      float sinA = lightExtraData.w;\n      vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n      vec2 rel = vec2(\n          dot(relativePos, vec2(cosA, -sinA)),\n          dot(relativePos, vec2(sinA, cosA))\n      );\n      float dist = length(rel);\n      float attenuationDistance =  falloffRange;\n      float maxDist = radius + attenuationDistance;\n      if (dist > maxDist) return vec3(0.0);\n      float attenuation = 0.0;\n      if (dist <= radius) {\n        attenuation = intensity;\n      } else if (dist < maxDist) {\n        float normalizedDist = (dist - radius) / attenuationDistance;\n        float t = intPow10(1.0 - normalizedDist, falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n      }\n      vec3 lightDir = normalize(vec3(-rel, 0.0));\n      float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) < 0.001) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n      return baseColor * lightColor * attenuation * diffuse;\n  }\nfloat sdOptimizedPolygon(vec2 p, vec4 precomputedData[4], int pointCount) {\n    float minDistSq = 1e20;\n    int windingNumber = 0;\n    int maxIter = min(pointCount, 4);\n    for (int i = 0; i < maxIter; ++i) {\n        vec4 data = precomputedData[i];\n        vec2 a = data.xy;\n        vec2 edgeVec = data.zw;\n        vec2 b = a + edgeVec;\n        vec2 pa = p - a;\n        float edgeLengthSq = dot(edgeVec, edgeVec);\n        if (edgeLengthSq > 0.0) {\n            float h = clamp(dot(pa, edgeVec) / edgeLengthSq, 0.0, 1.0);\n            vec2 closest = pa - edgeVec * h;\n            minDistSq = min(minDistSq, dot(closest, closest));\n        }\n        if (a.y <= p.y) {\n            if (b.y > p.y) {\n                float cross = edgeVec.x * (p.y - a.y) - edgeVec.y * (p.x - a.x);\n                windingNumber += (cross > 0.0) ? 1 : 0;\n            }\n        } else {\n            if (b.y <= p.y) {\n                float cross = edgeVec.x * (p.y - a.y) - edgeVec.y * (p.x - a.x);\n                windingNumber += (cross < 0.0) ? 1 : 0;\n            }\n        }\n    }\n    float minDist = sqrt(minDistSq);\n    return (windingNumber & 1) != 0 ? -minDist : minDist;\n}\nvec3 calculateParametricCustomPolygon(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 extraPackedData, vec4 precomputedPoints[4],vec4 extraData2) {\n    int pointCount = int(extraPackedData.x);\n    float falloffRange = extraPackedData.y;\n    float falloffExponent = extraPackedData.z;\n    if (pointCount < 3) return vec3(0.0);\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    vec2 center = vec2(extraData2.z,extraData2.w);\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float cosA = extraData2.x;\n    float sinA = extraData2.y;\n    vec2 fragLocalPos = vec2(\n        dot(relativePos, vec2(cosA, -sinA)),\n        dot(relativePos, vec2(sinA, cosA))\n    );\n    float maxRadius = extraPackedData.w +falloffRange ;\n    vec2 disv = fragLocalPos-center;\n    if ((disv.x*disv.x+disv.y*disv.y) > maxRadius*maxRadius) return vec3(0.0);\n    vec2 checkLocalPos = fragLocalPos;\n    bool quickInside = false;\n    for (int k = 0; k < 4; ++k) {\n      if (k >= pointCount) break;\n      vec2 a = precomputedPoints[k].xy;\n      vec2 b = a + vec2(precomputedPoints[k].z, precomputedPoints[k].w);\n      if (((a.y <= checkLocalPos.y) && (b.y > checkLocalPos.y)) ||\n        ((a.y > checkLocalPos.y) && (b.y <= checkLocalPos.y))) {\n        float crossProduct = (b.x - a.x) * (checkLocalPos.y - a.y) - (b.y - a.y) * (checkLocalPos.x - a.x);\n        if (a.y < b.y) {\n          quickInside = quickInside != (crossProduct > 0.0);\n        } else {\n          quickInside = quickInside != (crossProduct < 0.0);\n        }\n      }\n    }\n    bool isRangeZero = (falloffRange<1.0);\n    float sdDist =  0.0;\n    if(quickInside){\n      sdDist = 0.0;\n    }else{\n      if(isRangeZero){\n        sdDist  = falloffRange + 1.0;\n      }else{\n        sdDist = sdOptimizedPolygon(fragLocalPos, precomputedPoints, pointCount);\n      }\n    }\n    float attenuation= 1.0;\n    if (sdDist <= 0.0) {\n        attenuation = intensity;\n    } else if (sdDist < falloffRange) {\n        float normalizedDist = sdDist / falloffRange;\n        float t= intPow10(1.0 - normalizedDist, falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n    } else {\n        return vec3(0.0);\n    }\n    vec3 lightDir = normalize(vec3(-relativePos, 0.0));\n    float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) < 0.001) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n    return baseColor * lightColor * attenuation * diffuse;\n}\n vec3 calculateSpriteLight(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData,vec4 lightExtraData,vec4 lightExtraData2) {\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    float cosA = lightExtraData.x;\n    float sinA = lightExtraData.y;\n    float rangeX = lightExtraData.z;\n    float rangeY = lightExtraData.w;\n    if (rangeX < 0.0001 || rangeY < 0.0001) return vec3(0.0);\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float maxRange = max(rangeX, rangeY);\n    if (dot(relativePos, relativePos) > maxRange * maxRange ) return vec3(0.0);\n    vec2 rel = vec2(\n        dot(relativePos, vec2(cosA, -sinA)),\n        dot(relativePos, vec2(sinA, cosA))\n    );\n    if(abs(rel.x) > rangeX*0.5 || abs(rel.y) > rangeY*0.5) return vec3(0.0);\n    vec2 spriteUV = rel*vec2(1.0/rangeX,1.0/rangeY) + 0.5;\n    vec2 uvOrigin = lightExtraData2.xy;\n    vec2 uvSize = lightExtraData2.zw;\n    vec2 atlasUV = uvOrigin + spriteUV * uvSize;\n    vec4 spriteTexColor =texture(spriteLightTexture, atlasUV);\n    if (spriteTexColor.a < 0.001) return vec3(0.0);\n    float attenuation = spriteTexColor.a;\n    vec3 finalLight = spriteTexColor.rgb * lightColor * intensity * attenuation;\n    vec3 lightDir;\n    float lenSq = dot(rel, rel);\n    if (lenSq > 0.0) {\n        float invLen = inversesqrt(lenSq);\n        lightDir = vec3(-rel * invLen, 0.0);\n    } else {\n        lightDir = vec3(0.0, 0.0, 1.0);\n    }\n    float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) < 0.001) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n    return baseColor * finalLight * diffuse;\n}\n  vec2 getShadowMapUV(vec2 fragWorldPos) {\n    return ((fragWorldPos.xy - shadowMaskOffset.xy) * shadowMaskOffset.zw) / shadowMaskArea.zw;\n  }\n  float getShadowBit(vec4 shadowMask, float id) {\n      int idx = int(id);\n      int channel = idx / 8;\n      int bit = idx - channel * 8;\n      int mask = int(255.0 *\n          (channel == 0 ? shadowMask.r :\n          channel == 1 ? shadowMask.g :\n          channel == 2 ? shadowMask.b : shadowMask.a));\n      return float((mask >> bit) & 1);\n  }\n  float getNumberFromVec4Array(vec4 arr[16/4], int index) {\n    int idx = index;\n    int arrIdx = idx / 4;\n    int compIdx = idx - arrIdx * 4;\n    vec4 v = arr[arrIdx];\n    float components[4];\n    components[0] = v.x;\n    components[1] = v.y;\n    components[2] = v.z;\n    components[3] = v.w;\n    return components[compIdx];\n  }\n  bool isInLightById(float lightId) {\n      if(shadowOnOff == 0.0) return true;\n      vec2 uv = getShadowMapUV(worldPos.xy);\n      vec4 shadowMask = texture(shadowMap, uv);\n      return getShadowBit(shadowMask, lightId) != 0.0 ;\n  }\n  vec4 frag () {\n      vec4 o = vec4(1, 1, 1, 1);\n        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n      vec4 baseColor = o;\n      #if TWO_COLORED\n        baseColor.a = o.a * color.a;\n        baseColor.rgb = ((o.a - 1.0) * v_dark.a + 1.0 - o.rgb) * v_dark.rgb + o.rgb * color.rgb;\n      #else\n        baseColor = o * color;\n      #endif\n      if(isFLoatEqual(lightOnOff,0.0)){\n        ALPHA_TEST(baseColor);\n        return baseColor;\n      }\n      vec3 resultColor = vec3(0.0);\n      vec3 normalVec = vec3(0.0, 0.0, 1.0);\n      if(useNormalMap == 1.0) {\n        vec3 normalMapValue = texture(normalMap, uv0).xyz;\n        normalVec = normalize(normalMapValue * 2.0 - 1.0);\n      }\n      vec3 dummyColor =  vec3(1.0);\n      vec3 ambientLight = vec3(0.0);\n      vec3 valueLightInflu = vec3(0.0);\n      if(isFLoatEqual(ambientOnOffResult,1.0)){\n          ambientLight =  ambientColor.rgb * ambientIntensity;\n      }\n      int customLightIndex = 0;\n      for (int i = 0; i < 20; ++i) {\n        if (float(i) < lightCount) {\n          vec4 posData = lightPositionsArr[i];\n          vec4 colorData = lightColorsArr[i];\n          vec4 paramData = lightParamsArr[i];\n          vec4 extraData = lightExtraDataArr[i];\n          vec4 extraData2 = lightExtraDataArr2[i];\n          float lightType = posData.w;\n          float lightId = posData.z;\n          vec3 inputColor =(paramData.y == 0.0?baseColor.rgb:dummyColor);\n          if (lightType < 0.5) {\n            if( isInLightById(lightId)||isFLoatEqual(inEditMode,1.0)) {\n              valueLightInflu += calculatePointLight(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData, extraData2);\n            }\n          } else if (lightType > 0.5 && lightType < 1.5) {\n            vec3 lightPos = posData.xyz;\n            float rangeX = extraData.z;\n            float rangeY = extraData.w;\n            vec2 relativePos = worldPos.xy - lightPos.xy;\n            float maxRange = max(rangeX, rangeY);\n            if (dot(relativePos, relativePos) <= maxRange * maxRange) {\n                valueLightInflu += calculateSpriteLight(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData, extraData2);\n            }\n          } else if (lightType > 1.5 && lightType < 2.5) {\n            valueLightInflu += calculateParametricRegularPolygon(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          }else if (lightType > 2.5 && lightType < 3.5) {\n            valueLightInflu += calculateParametricRectangleLight(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          } else if (lightType > 3.5 && lightType < 4.5) {\n            valueLightInflu += calculateParametricCircleLight(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          } else if (lightType > 4.5 && lightType < 5.5) {\n              int polygonIndex = int(getNumberFromVec4Array(customTextureIndexArr, customLightIndex));\n              vec4 prePoints[4];\n              int baseIndex = polygonIndex * 4;\n              prePoints[0] = customArr[baseIndex];\n              prePoints[1] = customArr[baseIndex + 1];\n              prePoints[2] = customArr[baseIndex + 2];\n              prePoints[3] = customArr[baseIndex + 3];\n              valueLightInflu += calculateParametricCustomPolygon(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData, prePoints,extraData2);\n              customLightIndex += 1;\n          }\n        } else {\n          break;\n        }\n      }\n      vec3 finalColor = valueLightInflu;\n      o.rgb = ambientLight * baseColor.rgb  + finalColor;\n      o.a = baseColor.a;\n      ALPHA_TEST(o);\n      return o;\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\n#if TWO_COLORED\n  attribute vec4 a_color2;\n#endif\nvarying vec4 v_color;\n#if TWO_COLORED\n  varying vec4 v_dark;\n#endif\nvarying vec4 color;\nvarying vec2 uv0;\nvarying vec3 worldPos;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    worldPos = (cc_matWorld * pos).xyz;\n    pos = cc_matWorld * pos;\n  #else\n    worldPos = a_position;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n #if TWO_COLORED\n    v_dark = a_color2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  vec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n  #if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n  #else\n    return texture2D(tex, uv);\n  #endif\n  }\n  #if USE_ALPHA_TEST\n          uniform float alphaThreshold;\n  #endif\n  void ALPHA_TEST (in vec4 color) {\n    #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n    #endif\n  }\n  void ALPHA_TEST (in float alpha) {\n    #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n    #endif\n  }\n  varying vec4 color;\n  varying vec3 worldPos;\n  varying vec2 uv0;\n  #if TWO_COLORED\n    varying vec4 v_dark;\n  #endif\n  uniform sampler2D shadowMap;\n  uniform sampler2D normalMap;\n  uniform sampler2D spriteLightTexture;\n  uniform sampler2D polygonDataTextureHigh;\n                 uniform vec4 lightPositionsArr[20];\n               uniform vec4 lightColorsArr[20];\n               uniform vec4 lightParamsArr[20];\n               uniform vec4 customTextureIndexArr[4];\n        uniform vec4 lightExtraDataArr[20];\n      uniform vec4 lightExtraDataArr2[20];\n      uniform vec4 customArr[64];\n        uniform vec4 shadowMaskArea;\n      uniform vec4 shadowMaskOffset;\n      uniform vec4 ambientColor;\n      uniform float ambientIntensity;\n      uniform float ambientOnOffResult;\n      uniform float useNormalMap;\n      uniform float lightCount;\n      uniform float lightOnOff;\n      uniform float shadowOnOff;\n      uniform float inEditMode;\n    uniform sampler2D cc_spriteTexture;\nfloat intPow10(float base, float fexp) {\n    float t1 = clamp(fexp, 0.0, 10.0);\n    int exponent = int(t1 + 0.5);\n    if (exponent == 0) return 1.0;\n    if (exponent == 1) return base;\n    float result = base;\n    for (int i = 1; i < 10; i++) {\n        if (i >= exponent) break;\n        result *= base;\n    }\n    return result;\n}\n  float normalizeDeg(float deg) {\n    return mod(mod(deg + 180.0, 360.0) + 360.0, 360.0) - 180.0;\n  }\n  bool inAngleRange(float deg, float start, float end) {\n    float r = mod(end - start + 360.0, 360.0);\n    if (abs(end - start) >= 359.99) return true;\n    float d = mod(deg - start + 360.0, 360.0);\n    return d <= r;\n  }\n  bool isFLoatEqual(float a, float b) {\n      return abs(a - b) < 1e-4;\n  }\n  vec3 calculatePointLight(\n      vec3 normalVec,\n      vec3 baseColor,\n      vec3 fragWorldPos,\n      vec4 lightPosData,\n      vec4 lightColorData,\n      vec4 lightParamData,\n      vec4 lightExtraData,\n      vec4 lightExtraData2\n  ) {\n      vec3 lightWorldPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float blendMode = lightParamData.y;\n      float falloff = lightExtraData.w;\n      float innerRadius = lightExtraData.x;\n      float innerAngleStart = lightExtraData.y;\n      float innerAngleEnd = lightExtraData.z;\n      float outerAngleStart = lightExtraData2.x;\n      float outerAngleEnd = lightExtraData2.y;\n      float outerRadius = lightExtraData2.z;\n      float nodeAngle = lightExtraData2.w;\n      vec2 relPxOri = fragWorldPos.xy - lightWorldPos.xy;\n      float distPx = dot(relPxOri, relPxOri);\n      if (distPx > outerRadius * outerRadius) {\n        return vec3(0.0);\n      }\n      float cosA = cos(nodeAngle);\n      float sinA = sin(nodeAngle);\n      vec2 relPx = vec2(\n        dot(relPxOri, vec2(cosA, -sinA)),\n        dot(relPxOri, vec2(sinA, cosA))\n      );\n      float t = 1.0;\n      if (distPx > innerRadius * innerRadius) {\n        float dis = sqrt(distPx);\n        t = 1.0 - smoothstep(innerRadius, outerRadius, dis);\n        t = intPow10(t, falloff);\n      }\n      float angle = atan(relPx.y, relPx.x);\n      float deg = degrees(angle);\n      deg = normalizeDeg(deg);\n      float aInnerStart = degrees(innerAngleStart);\n      float aInnerEnd = degrees(innerAngleEnd);\n      float aOuterStart = degrees(outerAngleStart);\n      float aOuterEnd =degrees (outerAngleEnd);\n      if(!inAngleRange(deg, aOuterStart, aOuterEnd)) {\n        return vec3(0.0);\n      }\n      float angleAtten = 0.0;\n      float totalAngle = abs(aOuterEnd - aOuterStart);\n      if (totalAngle >= 360.0) {\n        angleAtten = 1.0;\n      } else if (inAngleRange(deg, aInnerStart, aInnerEnd)) {\n        angleAtten = 1.0;\n      } else if (inAngleRange(deg, aOuterStart, aInnerStart)) {\n        float edgeLen = mod(aInnerStart - aOuterStart + 360.0, 360.0);\n        float s = mod(deg - aOuterStart + 360.0, 360.0) / edgeLen;\n        angleAtten = intPow10(s, falloff);\n      } else if (inAngleRange(deg, aInnerEnd, aOuterEnd)) {\n        float edgeLen = mod(aOuterEnd - aInnerEnd + 360.0, 360.0);\n        float s = mod(aOuterEnd - deg + 360.0, 360.0) / edgeLen;\n        angleAtten = intPow10(s, falloff);\n      } else {\n        angleAtten = 0.0;\n      }\n      float attenuation = t * angleAtten;\n      if (attenuation <= 0.001) {\n        return vec3(0.0);\n      };\n      vec3 lightDir = normalize(vec3(-relPx, 0.0));\n      float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) == 0.0) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n      return baseColor*lightColor * attenuation * diffuse * intensity;\n  }\n  float sdPolygon(vec2 p, float radius, float sides) {\n    float sideCount = max(3.0, floor(sides + 0.5));\n    float angleStep = 6.2831853 / sideCount;\n    float a = atan(p.y, p.x) + 3.1415926;\n    float r = length(p);\n    float segmentAngle = floor((a + angleStep * 0.5) / angleStep) * angleStep;\n    float distToEdge = r * cos(segmentAngle - a) - radius * cos(angleStep * 0.5);\n    float distToVertex = r - radius;\n    return max(distToEdge, distToVertex);\n  }\n  vec3 calculateParametricRegularPolygon(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    float radius = max(0.1, lightExtraData.x);\n    float sides = max(3.0, lightExtraData.y);\n    float falloffRange = lightExtraData2.y;\n    float  falloffExponent = lightExtraData2.x;\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float cosA = lightExtraData.z;\n    float sinA = lightExtraData.w;\n    vec2 rel = vec2(\n      dot(relativePos, vec2(cosA, -sinA)),\n      dot(relativePos, vec2(sinA, cosA))\n    );\n    float dist = length(rel);\n    float attenuationDistance =  falloffRange;\n    if (dist > (radius + attenuationDistance)) return vec3(0.0);\n    float sdDist = sdPolygon(rel, radius, sides);\n    float attenuation = 0.0;\n    if (sdDist <= 0.0) {\n      attenuation = intensity;\n    } else if (sdDist < attenuationDistance) {\n      float normalizedDist = sdDist / attenuationDistance;\n      float t = intPow10(1.0 - normalizedDist, falloffExponent);\n      attenuation = intensity * clamp(t, 0.0, 1.0);\n    }\n    vec3 lightDir = normalize(vec3(-rel, 0.0));\n    float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) == 0.0) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n    return baseColor*lightColor * attenuation * diffuse;\n  }\n  float sdBox( vec2 p, vec2 b )\n  {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n  }\n  vec3 calculateParametricRectangleLight(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n      vec3 lightPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float width = max(0.1, lightExtraData.x);\n      float height = max(0.1, lightExtraData.y);\n      float falloffRange = lightExtraData2.y;\n      float falloffExponent = lightExtraData2.x;\n      vec2 halfSize = vec2(width * 0.5, height * 0.5);\n      vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n      float cosA = lightExtraData.z;\n      float sinA = lightExtraData.w;\n      vec2 rel = vec2(\n          dot(relativePos, vec2(cosA, -sinA)),\n          dot(relativePos, vec2(sinA, cosA))\n      );\n      float attenuationDistance =  falloffRange;\n      float maxDist = length(halfSize) + attenuationDistance;\n      if (length(rel) > maxDist) return vec3(0.0);\n      float sdDist = sdBox(rel, halfSize);\n      float attenuation = 0.0;\n      if (sdDist <= 0.0) {\n        attenuation = intensity;\n      } else if (sdDist < attenuationDistance) {\n        float normalizedDist = sdDist / attenuationDistance;\n        float t = intPow10(1.0 - normalizedDist,falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n      }\n      vec3 lightDir = normalize(vec3(-rel, 0.0));\n      float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) < 0.001) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n      return baseColor * lightColor * attenuation * diffuse;\n  }\n  vec3 calculateParametricCircleLight(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 lightExtraData,vec4 lightExtraData2) {\n      vec3 lightPos = lightPosData.xyz;\n      vec3 lightColor = lightColorData.rgb;\n      float intensity = lightParamData.x;\n      float radius = max(0.1, lightExtraData.x);\n      float falloffRange = lightExtraData2.y;\n      float falloffExponent = lightExtraData2.x;\n      float cosA = lightExtraData.z;\n      float sinA = lightExtraData.w;\n      vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n      vec2 rel = vec2(\n          dot(relativePos, vec2(cosA, -sinA)),\n          dot(relativePos, vec2(sinA, cosA))\n      );\n      float dist = length(rel);\n      float attenuationDistance =  falloffRange;\n      float maxDist = radius + attenuationDistance;\n      if (dist > maxDist) return vec3(0.0);\n      float attenuation = 0.0;\n      if (dist <= radius) {\n        attenuation = intensity;\n      } else if (dist < maxDist) {\n        float normalizedDist = (dist - radius) / attenuationDistance;\n        float t = intPow10(1.0 - normalizedDist, falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n      }\n      vec3 lightDir = normalize(vec3(-rel, 0.0));\n      float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) < 0.001) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n      return baseColor * lightColor * attenuation * diffuse;\n  }\n  float sdOptimizedPolygon(vec2 p, vec4 precomputedData[4], int pointCount) {\n    const float epsilon = 0.00001;\n    float minDist = 1e20;\n    for (int i = 0; i < 4; ++i) {\n      if (i >= pointCount) break;\n      vec2 a = precomputedData[i].xy;\n      vec2 edgeVec = vec2(precomputedData[i].z, precomputedData[i].w);\n      vec2 pa = p - a;\n      float edgeLengthSq = dot(edgeVec, edgeVec);\n      if (edgeLengthSq > 0.0) {\n        float h = clamp(dot(pa, edgeVec) / edgeLengthSq, 0.0, 1.0);\n        minDist = min(minDist, length(pa - edgeVec * h));\n      }\n    }\n    bool inside = false;\n    for (int i = 0; i < 4; ++i) {\n      if (i >= pointCount) break;\n      vec2 a = precomputedData[i].xy;\n      vec2 b = a + vec2(precomputedData[i].z, precomputedData[i].w);\n      if (((a.y <= p.y) && (b.y > p.y)) || ((a.y > p.y) && (b.y <= p.y))) {\n        float crossProduct = (b.x - a.x) * (p.y - a.y) - (b.y - a.y) * (p.x - a.x);\n        if (abs(crossProduct) < epsilon) {\n          crossProduct = 0.0;\n        }\n        if (a.y < b.y) {\n          inside = inside != (crossProduct > 0.0);\n        } else {\n          inside = inside != (crossProduct < 0.0);\n        }\n      }\n    }\n    return inside ? -minDist : minDist;\n  }\nvec3 calculateParametricCustomPolygon(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData, vec4 extraPackedData, vec4 precomputedPoints[4],vec4 extraData2) {\n    int pointCount = int(extraPackedData.x);\n    float falloffRange = extraPackedData.y;\n    float falloffExponent = extraPackedData.z;\n    if (pointCount < 3) return vec3(0.0);\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    vec2 center = vec2(extraData2.z,extraData2.w);\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float cosA = extraData2.x;\n    float sinA = extraData2.y;\n    vec2 fragLocalPos = vec2(\n        dot(relativePos, vec2(cosA, -sinA)),\n        dot(relativePos, vec2(sinA, cosA))\n    );\n    float maxRadius = extraPackedData.w +falloffRange ;\n    vec2 disv = fragLocalPos-center;\n    if ((disv.x*disv.x+disv.y*disv.y) > maxRadius*maxRadius) return vec3(0.0);\n    vec2 checkLocalPos = fragLocalPos;\n    bool quickInside = false;\n    for (int k = 0; k < 4; ++k) {\n      if (k >= pointCount) break;\n      vec2 a = precomputedPoints[k].xy;\n      vec2 b = a + vec2(precomputedPoints[k].z, precomputedPoints[k].w);\n      if (((a.y <= checkLocalPos.y) && (b.y > checkLocalPos.y)) ||\n        ((a.y > checkLocalPos.y) && (b.y <= checkLocalPos.y))) {\n        float crossProduct = (b.x - a.x) * (checkLocalPos.y - a.y) - (b.y - a.y) * (checkLocalPos.x - a.x);\n        if (a.y < b.y) {\n          quickInside = quickInside != (crossProduct > 0.0);\n        } else {\n          quickInside = quickInside != (crossProduct < 0.0);\n        }\n      }\n    }\n    bool isRangeZero = (falloffRange<1.0);\n    float sdDist =  0.0;\n    if(quickInside){\n      sdDist = 0.0;\n    }else{\n      if(isRangeZero){\n        sdDist  = falloffRange + 1.0;\n      }else{\n        sdDist = sdOptimizedPolygon(fragLocalPos, precomputedPoints, pointCount);\n      }\n    }\n    float attenuation= 1.0;\n    if (sdDist <= 0.0) {\n        attenuation = intensity;\n    } else if (sdDist < falloffRange) {\n        float normalizedDist = sdDist / falloffRange;\n        float t= intPow10(1.0 - normalizedDist, falloffExponent);\n        attenuation = intensity * clamp(t, 0.0, 1.0);\n    } else {\n        return vec3(0.0);\n    }\n    vec3 lightDir = normalize(vec3(-relativePos, 0.0));\n    float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) < 0.001) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n    return baseColor * lightColor * attenuation * diffuse;\n}\n vec3 calculateSpriteLight(vec3 normalVec, vec3 baseColor, vec3 fragWorldPos, vec4 lightPosData, vec4 lightColorData, vec4 lightParamData,vec4 lightExtraData,vec4 lightExtraData2) {\n    vec3 lightPos = lightPosData.xyz;\n    vec3 lightColor = lightColorData.rgb;\n    float intensity = lightParamData.x;\n    float cosA = lightExtraData.x;\n    float sinA = lightExtraData.y;\n    float rangeX = lightExtraData.z;\n    float rangeY = lightExtraData.w;\n    if (rangeX < 0.0001 || rangeY < 0.0001) return vec3(0.0);\n    vec2 relativePos = fragWorldPos.xy - lightPos.xy;\n    float maxRange = max(rangeX, rangeY);\n    if (dot(relativePos, relativePos) > maxRange * maxRange ) return vec3(0.0);\n    vec2 rel = vec2(\n        dot(relativePos, vec2(cosA, -sinA)),\n        dot(relativePos, vec2(sinA, cosA))\n    );\n    if(abs(rel.x) > rangeX*0.5 || abs(rel.y) > rangeY*0.5) return vec3(0.0);\n    vec2 spriteUV = rel*vec2(1.0/rangeX,1.0/rangeY) + 0.5;\n    vec2 uvOrigin = lightExtraData2.xy;\n    vec2 uvSize = lightExtraData2.zw;\n    vec2 atlasUV = uvOrigin + spriteUV * uvSize;\n    vec4 spriteTexColor =texture2D(spriteLightTexture, atlasUV);\n    if (spriteTexColor.a < 0.001) return vec3(0.0);\n    float attenuation = spriteTexColor.a;\n    vec3 finalLight = spriteTexColor.rgb * lightColor * intensity * attenuation;\n    vec3 lightDir;\n    float lenSq = dot(rel, rel);\n    if (lenSq > 0.0) {\n        float invLen = inversesqrt(lenSq);\n        lightDir = vec3(-rel * invLen, 0.0);\n    } else {\n        lightDir = vec3(0.0, 0.0, 1.0);\n    }\n    float diffuse = (length(normalVec - vec3(0.0, 0.0, 1.0)) < 0.001) ? 1.0 : max(0.0, dot(normalize(normalVec), lightDir));\n    return baseColor * finalLight * diffuse;\n}\n  vec2 getShadowMapUV(vec2 fragWorldPos) {\n    return ((fragWorldPos.xy - shadowMaskOffset.xy) * shadowMaskOffset.zw) / shadowMaskArea.zw;\n  }\n  float getShadowBit(vec4 shadowMask, float id) {\n    int idx = int(id);\n    int channel = idx / 8;\n    int bit = idx - channel * 8;\n    float v = 0.0;\n    if (channel == 0) v = shadowMask.r;\n    else if (channel == 1) v = shadowMask.g;\n    else if (channel == 2) v = shadowMask.b;\n    else if (channel == 3) v = shadowMask.a;\n    float mask = 255.0 * v + 0.001;\n    return mod(floor(mask / intPow10(2.0, float(bit))+ 0.001), 2.0);\n  }\n  float getNumberFromVec4Array(vec4 arr[16/4], int index) {\n    int idx = index;\n    int arrIdx = idx / 4;\n    int compIdx = idx - arrIdx * 4;\n    vec4 v = vec4(0.0);\n    if (arrIdx == 0) v = arr[0];\n    else if (arrIdx == 1) v = arr[1];\n    else if (arrIdx == 2) v = arr[2];\n    else if (arrIdx == 3) v = arr[3];\n    if (compIdx == 0) return v.x;\n    else if (compIdx == 1) return v.y;\n    else if (compIdx == 2) return v.z;\n    else return v.w;\n  }\n  bool isInLightById(float lightId) {\n      if(shadowOnOff == 0.0) return true;\n      vec2 uv = getShadowMapUV(worldPos.xy);\n      vec4 shadowMask = texture2D(shadowMap, uv);\n      return getShadowBit(shadowMask, lightId) != 0.0 ;\n  }\n  vec4 frag () {\n      vec4 o = vec4(1, 1, 1, 1);\n        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n      vec4 baseColor = o;\n      #if TWO_COLORED\n        baseColor.a = o.a * color.a;\n        baseColor.rgb = ((o.a - 1.0) * v_dark.a + 1.0 - o.rgb) * v_dark.rgb + o.rgb * color.rgb;\n      #else\n        baseColor = o * color;\n      #endif\n      if(isFLoatEqual(lightOnOff,0.0)){\n        ALPHA_TEST(baseColor);\n        return baseColor;\n      }\n      vec3 resultColor = vec3(0.0);\n      vec3 normalVec = vec3(0.0, 0.0, 1.0);\n      if(useNormalMap == 1.0) {\n        vec3 normalMapValue = texture2D(normalMap, uv0).xyz;\n        normalVec = normalize(normalMapValue * 2.0 - 1.0);\n      }\n      vec3 dummyColor =  vec3(1.0);\n      vec3 ambientLight = vec3(0.0);\n      vec3 valueLightInflu = vec3(0.0);\n      if(isFLoatEqual(ambientOnOffResult,1.0)){\n          ambientLight =  ambientColor.rgb * ambientIntensity;\n      }\n      int customLightIndex = 0;\n      for (int i = 0; i < 20; ++i) {\n        if (float(i) < lightCount) {\n          vec4 posData = lightPositionsArr[i];\n          vec4 colorData = lightColorsArr[i];\n          vec4 paramData = lightParamsArr[i];\n          vec4 extraData = lightExtraDataArr[i];\n          vec4 extraData2 = lightExtraDataArr2[i];\n          float lightType = posData.w;\n          float lightId = posData.z;\n          vec3 inputColor =(paramData.y == 0.0?baseColor.rgb:dummyColor);\n          if (lightType < 0.5) {\n            if( isInLightById(lightId)||isFLoatEqual(inEditMode,1.0)) {\n              valueLightInflu += calculatePointLight(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData, extraData2);\n            }\n          } else if (lightType > 0.5 && lightType < 1.5) {\n            vec3 lightPos = posData.xyz;\n            float rangeX = extraData.z;\n            float rangeY = extraData.w;\n            vec2 relativePos = worldPos.xy - lightPos.xy;\n            float maxRange = max(rangeX, rangeY);\n            if (dot(relativePos, relativePos) <= maxRange * maxRange) {\n                valueLightInflu += calculateSpriteLight(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData, extraData2);\n            }\n          } else if (lightType > 1.5 && lightType < 2.5) {\n            valueLightInflu += calculateParametricRegularPolygon(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          }else if (lightType > 2.5 && lightType < 3.5) {\n            valueLightInflu += calculateParametricRectangleLight(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          } else if (lightType > 3.5 && lightType < 4.5) {\n            valueLightInflu += calculateParametricCircleLight(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData,extraData2);\n          } else if (lightType > 4.5 && lightType < 5.5) {\n              int polygonIndex = int(getNumberFromVec4Array(customTextureIndexArr, customLightIndex));\n              vec4 prePoints[4];\n              int baseIndex = polygonIndex * 4;\n              if(customLightIndex==0)\n                  {\n                      prePoints[0] = customArr[0*4];\n                      prePoints[1] = customArr[0*4 + 1];\n                      prePoints[2] = customArr[0*4 + 2];\n                      prePoints[3] = customArr[0*4 + 3];\n                  }\n              else if(customLightIndex==1)\n                  {\n                      prePoints[0] = customArr[1*4];\n                      prePoints[1] = customArr[1*4 + 1];\n                      prePoints[2] = customArr[1*4 + 2];\n                      prePoints[3] = customArr[1*4 + 3];\n                  }\n              else if(customLightIndex==2)\n                  {\n                      prePoints[0] = customArr[2*4];\n                      prePoints[1] = customArr[2*4 + 1];\n                      prePoints[2] = customArr[2*4 + 2];\n                      prePoints[3] = customArr[2*4 + 3];\n                  }\n              else if(customLightIndex==3)\n                  {\n                      prePoints[0] = customArr[3*4];\n                      prePoints[1] = customArr[3*4 + 1];\n                      prePoints[2] = customArr[3*4 + 2];\n                      prePoints[3] = customArr[3*4 + 3];\n                  }\n              else if(customLightIndex==4)\n                  {\n                      prePoints[0] = customArr[4*4];\n                      prePoints[1] = customArr[4*4 + 1];\n                      prePoints[2] = customArr[4*4 + 2];\n                      prePoints[3] = customArr[4*4 + 3];\n                  }\n              else if(customLightIndex==5)\n                  {\n                      prePoints[0] = customArr[5*4];\n                      prePoints[1] = customArr[5*4 + 1];\n                      prePoints[2] = customArr[5*4 + 2];\n                      prePoints[3] = customArr[5*4 + 3];\n                  }\n              else if(customLightIndex==6)\n                  {\n                      prePoints[0] = customArr[6*4];\n                      prePoints[1] = customArr[6*4 + 1];\n                      prePoints[2] = customArr[6*4 + 2];\n                      prePoints[3] = customArr[6*4 + 3];\n                  }\n              else if(customLightIndex==7)\n                  {\n                      prePoints[0] = customArr[7*4];\n                      prePoints[1] = customArr[7*4 + 1];\n                      prePoints[2] = customArr[7*4 + 2];\n                      prePoints[3] = customArr[7*4 + 3];\n                  }\n              valueLightInflu += calculateParametricCustomPolygon(normalVec, inputColor, worldPos, posData, colorData, paramData, extraData, prePoints,extraData2);\n              customLightIndex += 1;\n          }\n        } else {\n          break;\n        }\n      }\n      vec3 finalColor = valueLightInflu;\n      o.rgb = ambientLight * baseColor.rgb  + finalColor;\n      o.a = baseColor.a;\n      ALPHA_TEST(o);\n      return o;\n  }\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":223}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"TWO_COLORED","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"}]}],[{"passes":[{"program":"../Light2D/light-receiver|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.01]},"lightOnOff":{"type":13,"value":[1]},"shadowOnOff":{"type":13,"value":[0]},"ambientColor":{"type":16,"value":[1,1,1,1]},"ambientIntensity":{"type":13,"value":[0.4]},"ambientOnOffResult":{"type":13,"value":[1]},"lightCount":{"type":13,"value":[0]},"lightPositionsArr":{"type":16,"value":[0,0,0,0]},"lightColorsArr":{"type":16,"value":[0,0,0,0]},"lightParamsArr":{"type":16,"value":[0,0,0,0]},"lightExtraDataArr":{"type":16,"value":[0,0,0,0]},"lightExtraDataArr2":{"type":16,"value":[0,0,0,0]},"customArr":{"type":16,"value":[0,0,0,0]},"useNormalMap":{"type":13,"value":[0]},"normalMap":{"value":"white","type":28},"spriteLightTexture":{"value":"white","type":28},"shadowMap":{"value":"white","type":28},"shadowMaskArea":{"type":16,"value":[0,0,0,0]},"shadowMaskOffset":{"type":16,"value":[0,0,0,0]},"inEditMode":{"type":13,"value":[1]},"polygonDataTextureHigh":{"value":"white","type":28},"customPolygonCount":{"type":13,"value":[0]},"customTextureIndexArr":{"type":16,"value":[0,0,0,0]}}}]}]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["daIgtScYpMn43MwEpWauCE"]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["dbT2ADUU1DiqXtHnPl1gc/"]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["e1alj8HqVPypj2nJU7gFIq"]}],[3],0,[],[],[]],[[[106,[[107,"ShadowFlow",[[108,"ShadowStage"]]],[109,"ForwardFlow",1,[[110,"ForwardStage",[[111,["default"]],[112,true,1,["default"]]]]]]]]],0,0,[],[],[]]]]
